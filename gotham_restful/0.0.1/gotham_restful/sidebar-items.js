initSidebarItems({"attr":[["rest_create",""],["rest_delete",""],["rest_delete_all",""],["rest_read",""],["rest_read_all",""],["rest_search",""],["rest_update",""],["rest_update_all",""]],"derive":[["FromBody",""],["OpenapiType",""],["RequestBody",""],["Resource",""]],"struct":[["NoContent","This is the return type of a resource that doesn’t actually return something. It will result in a 204 No Content answer by default. You don’t need to use this type directly if using the function attributes:"],["OpenapiRouter","This type is required to build routes while adding them to the generated OpenAPI Spec at the same time. There is no need to use this type directly. See `WithOpenapi` on how to do this."],["OpenapiSchema","This struct needs to be available for every type that can be part of an OpenAPI Spec. It is already implemented for primitive types, String, Vec, Option and the like. To have it available for your type, simply derive from `OpenapiType`."],["Raw",""],["Response","A response, used to create the final gotham response from."],["Success","This can be returned from a resource when there is no cause of an error. For example:"]],"trait":[["DrawResourceRoutes","This trait allows to draw routes within an resource. Use this only inside the `Resource::setup` method."],["DrawResources","This trait adds the `resource` method to gotham’s routing. It allows you to register any RESTful `Resource` with a path."],["FromBody","This trait must be implemented by every type that can be used as a request body. It allows to create the type from a hyper body chunk and it’s content type."],["GetOpenapi","This trait adds the `get_openapi` method to an OpenAPI-aware router."],["OpenapiType","This trait needs to be implemented by every type that is being used in the OpenAPI Spec. It gives access to the `OpenapiSchema` of this type. It is provided for primitive types, String and the like. For use on your own types, there is a derive macro:"],["RequestBody","A type that can be used inside a request body. Implemented for every type that is deserializable with serde. If the `openapi` feature is used, it must also be of type `OpenapiType`."],["Resource","This trait must be implemented by every RESTful Resource. It will allow you to register the different methods for this Resource."],["ResourceCreate","Handle a POST request on the Resource root."],["ResourceDelete","Handle a DELETE request on the Resource with an id."],["ResourceDeleteAll","Handle a DELETE request on the Resource root."],["ResourceRead","Handle a GET request on the Resource with an id."],["ResourceReadAll","Handle a GET request on the Resource root."],["ResourceResult","A trait provided to convert a resource’s result to json."],["ResourceSearch","Handle a GET request on the Resource with additional search parameters."],["ResourceType",""],["ResourceUpdate","Handle a PUT request on the Resource with an id."],["ResourceUpdateAll","Handle a PUT request on the Resource root."],["ResponseBody","A type that can be used inside a response body. Implemented for every type that is serializable with serde. If the `openapi` feature is used, it must also be of type `OpenapiType`."],["WithOpenapi","This trait adds the `with_openapi` method to gotham’s routing. It turns the default router into one that will only allow RESTful resources, but record them and generate an OpenAPI specification on request."]]});