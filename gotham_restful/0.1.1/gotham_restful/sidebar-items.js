initSidebarItems({"attr":[["change",""],["change_all",""],["create",""],["read",""],["read_all",""],["remove",""],["remove_all",""],["search",""]],"derive":[["FromBody",""],["OpenapiType",""],["RequestBody",""],["Resource",""],["ResourceError",""]],"enum":[["AuthError","This is an error type that always yields a 403 Forbidden response. This type is best used in combination with [AuthSuccess] or [AuthResult]."],["AuthErrorOrOther","This is an error type that either yields a 403 Forbidden respone if produced from an authentication error, or delegates to another error type. This type is best used with [AuthResult]."],["AuthSource","The source of the authentication token in the request."],["AuthStatus","The authentication status returned by the auth middleware for each request."],["Origin","Specify the allowed origins of the request. It is up to the browser to check the validity of the origin. This, when sent to the browser, will indicate whether or not the request’s origin was allowed to make the request."]],"fn":[["handle_cors","Handle CORS for a non-preflight request. This means manipulating the `res` HTTP headers so that the response is aligned with the `state`’s [CorsConfig]."]],"struct":[["AuthMiddleware","This is the auth middleware. To use it, first make sure you have the `auth` feature enabled. Then simply add it to your pipeline and request it inside your handler:"],["AuthValidation","Contains the various validations that are applied after decoding a JWT."],["CorsConfig","This is the configuration that the CORS handler will follow. Its default configuration is basically not to touch any responses, resulting in the browser’s default behaviour."],["NoContent","This is the return type of a resource that doesn’t actually return something. It will result in a 204 No Content answer by default. You don’t need to use this type directly if using the function attributes:"],["OpenapiInfo",""],["OpenapiSchema","This struct needs to be available for every type that can be part of an OpenAPI Spec. It is already implemented for primitive types, String, Vec, Option and the like. To have it available for your type, simply derive from [OpenapiType]."],["Raw","This type can be used both as a raw request body, as well as as a raw response. However, all types of request bodies are accepted by this type. It is therefore recommended to derive your own type from [RequestBody] and only use this when you need to return a raw response. This is a usage example that simply returns its body:"],["Response","A response, used to create the final gotham response from."],["StaticAuthHandler","An [AuthHandler] returning always the same secret. See [AuthMiddleware] for a usage example."],["Success","This can be returned from a resource when there is no cause of an error. It behaves similar to a smart pointer like box, it that it implements [AsRef], [Deref] and the likes."]],"trait":[["AuthHandler","This trait will help the auth middleware to determine the validity of an authentication token."],["CorsRoute","Add CORS routing for your path. This is required for handling preflight requests."],["DrawResourceRoutes","This trait allows to draw routes within an resource. Use this only inside the [Resource::setup] method."],["DrawResources","This trait adds the `resource` method to gotham’s routing. It allows you to register any RESTful [Resource] with a path."],["FromBody","This trait should be implemented for every type that can be built from an HTTP request body plus its media type."],["GetOpenapi","This trait adds the `get_openapi` method to an OpenAPI-aware router."],["IntoResponseError",""],["OpenapiType","This trait needs to be implemented by every type that is being used in the OpenAPI Spec. It gives access to the [OpenapiSchema] of this type. It is provided for primitive types, String and the like. For use on your own types, there is a derive macro:"],["RequestBody","A type that can be used inside a request body. Implemented for every type that is deserializable with serde. If the `openapi` feature is used, it must also be of type OpenapiType."],["Resource","This trait must be implemented for every resource. It allows you to register the different methods that can be handled by this resource to be registered with the underlying router."],["ResourceChange","The change [ResourceMethod]."],["ResourceChangeAll","The change_all [ResourceMethod]."],["ResourceCreate","The create [ResourceMethod]."],["ResourceID","A type than can be used as a parameter to a resource method. Implemented for every type that is deserialize and thread-safe. If the `openapi` feature is used, it must also be of type OpenapiType."],["ResourceMethod","A common trait for every resource method. It defines the return type as well as some general information about a resource method."],["ResourceRead","The read [ResourceMethod]."],["ResourceReadAll","The read_all [ResourceMethod]."],["ResourceRemove","The remove [ResourceMethod]."],["ResourceRemoveAll","The remove_all [ResourceMethod]."],["ResourceResult","A trait provided to convert a resource’s result to json."],["ResourceSearch","The search [ResourceMethod]."],["ResourceType",""],["ResponseBody","A type that can be used inside a response body. Implemented for every type that is serializable with serde. If the `openapi` feature is used, it must also be of type OpenapiType."],["WithOpenapi","This trait adds the `with_openapi` method to gotham’s routing. It turns the default router into one that will only allow RESTful resources, but record them and generate an OpenAPI specification on request."]],"type":[["AuthResult","This return type can be used to map another ResourceResult that can only be returned if the client is authenticated. Otherwise, an empty 403 Forbidden response will be issued."],["AuthSuccess","This return type can be used to map another ResourceResult that can only be returned if the client is authenticated. Otherwise, an empty 403 Forbidden response will be issued."]]});