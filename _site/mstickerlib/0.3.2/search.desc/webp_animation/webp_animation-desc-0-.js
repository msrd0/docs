searchState.loadedDescShard("webp_animation", 0, "Overview\nAnimation parameters\nBgra (blue, green, red, alpha)\nData input buffer size did not match encoder metadata …\nColor Mode that configures the output type of <code>Decoder</code> <code>Frame</code>…\nDecoder init failed, input contains wrong bytes\nA decoder for webp animation data\nDecoder could not get metadata of webp stream. Corrupt …\nAn iterator that produces decoded <code>Frame</code>’s from webp data\nAn options struct for <code>Decoder</code>\nSupplied dimensions must be positive\nAn encoder for creating webp animation\nFrame could not be added to webp stream by underlying …\nEncoder webp assembly failed\nEncoder create failed. Wrong options combination?\nAn options struct for <code>Encoder</code> instance\nEncoding configuration. Can be set for <code>Encoder</code> globally or …\nEncoding type\nError type produced by <code>webp_animation</code> code\nAn animation frame containing data and metadata produced …\nEncoder config validation failed\nLosless encoding. Default.\nLossy encoding\nParameters related to lossy compression only\nNo frames have been supplied to encoder\nInitializing webp options failed, internal (memory …\nRaw data could not be converted into webp frame by …\nRgb (red, green, blue) -no alpha\nRgba (red, green, blue, alpha)\nTimestamp must be higher or equal to the previous frame …\nTimestamp must be higher value than previous frame …\nWebp stream contains too large canvas. For now, size is …\nA safe wrapper for WebP bytedata. Consider as <code>&amp;[u8]</code> …\nUnderlying data is in different color mode\nSupplied zero-sized buffer where bytes where expected\nAdd a new frame to be encoded\nAdd a new frame to be encoded with special per-frame …\nIf true, use mixed compression mode; may choose either …\nAlgorithm for encoding the alpha plane (false = none, true …\nPredictive filtering method for alpha plane. 0: none, 1: …\nBetween 0 (smallest size) and 100 (lossless). Default is …\nAnimation parameters\nAuto adjust filter’s strength [false = off, true = on]\nGet <code>ColorMode</code> of the frame (consistent accross frames)\nOutput colorspace. <code>ColorMode::Rgba</code> by default. Affects …\nInput colorspace. <code>ColorMode::Rgba</code> by default\nGet decoded frame data, size <code>width</code> * <code>height</code> * 4, pixels in …\nReturns dimensions for webp frames (<code>width</code>, <code>height</code>)\nGet dimensions of the frame (<code>width</code>, <code>height</code>)\nDefault per-frame encoding config, optional. Can also be …\nEncoding Type (lossless or lossy). Defaults to lossless\nrange: [0 = off .. 7 = least sharp]\nrange: [0 = off .. 100 = strongest]\nfiltering type: 0 = simple, 1 = strong (only used if …\nWill encode the stream and return encoded bytes in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMinimum and maximum distance between consecutive key …\nNumber of times to repeat the animation [0 = infinite, …\nQuality/speed trade-off (0=fast, 6=slower-better)\nIf true, minimize the output size (slow). Implicitly …\nConstruct a new decoder from webp <code>buffer</code>\nConstruct a new encoder with default options for …\nConstruct a new decoder from webp <code>buffer</code>\nConstruct a new encoder with custom options for dimensions …\nquality degradation allowed to fit the 512k limit on …\nlog2(number of token partitions) in [0..3] Default is set …\nnumber of entropy-analysis passes (in [1..10]).\npreprocessing filter (0=none, 1=segment-smooth)\nBetween 0 and 100. For lossy, 0 gives the smallest size …\nmaximum number of segments to use, in [1..4]\nSets the default encoding config\nif true, export the compressed picture back. In-loop …\nReturn the pixel bytesize for the color mode\nSpatial Noise Shaping. 0=off, 100=maximum.\nif non-zero, specifies the minimal distortion to try to …\nif non-zero, set the desired target size in bytes. Takes …\nGet timestamp of the frame in milliseconds\nif needed, use sharp (and slow) RGB-&gt;YUV conversion\nIf true, use multi-threaded decoding. Enabled by default\nIf true, print info and warning messages to stderr. …")