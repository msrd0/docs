searchState.loadedDescShard("libwebp_sys", 0, "No value.\nNo value.\npeak-signal-to-noise ratio for Y/U/V/All/Alpha\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nEnumeration of the status codes\npicture has invalid width/height\nerror while flushing bytes\nmemory error while flushing bits\nfile is bigger than 4G\nconfiguration is invalid\nlist terminator. always last.\na pointer parameter is NULL\nmemory error allocating objects\npartition is bigger than 512k\npartition is bigger than 16M\nabort request by user\nMacro to check ABI compatibility (same major revision …\nbit that is set if alpha is present\nbit-mask to get the UV sampling factors\ndefault preset.\nDiscrete tone image (graph, map-tile etc).\noutdoor photograph, with natural lighting\ndigital picture, like portrait, inner shot\ndefault preset.\nhand or line drawing, with high-contrast details\nsmall-sized colorful images\noutdoor photograph, with natural lighting\ndigital picture, like portrait, inner shot\ntext-like\n4:2:0\nalpha channel variant\nStructure for storing auxiliary statistics.\nFeatures gathered from the bitstream\nRemove the transparency information (if present) by …\nHelper function: given a width x height plane of RGBA or …\nCompression parameters.\nShould always be called, to initialize a fresh WebPConfig …\nActivate the lossless compression mode with the desired …\nThis function will initialize the configuration according …\nOutput buffer\nNon-incremental version. This version decodes the full …\nSame as WebPDecodeRGBA, but returning A, R, G, B, A, R, G, …\nSame as WebPDecodeRGB, but returning B, G, R, B, G, R… …\nSame as WebPDecodeRGBA, but returning B, G, R, A, B, G, R, …\nSame as WebPDecodeRGBA, but returning R, G, B, R, G, B… …\nDecodes WebP images pointed to by ‘data’ and returns …\nDecode WebP images pointed to by ‘data’ to Y’UV …\nWebPDecodeYUVInto() is a variant of WebPDecodeYUV() that …\nMain object storing the configuration for advanced …\nDecoding options\nColor spaces.\nMain encoding call, after config and picture have been …\nReturns the size of the compressed data (pointed to by …\nReturns the size of the compressed data (pointed to by …\nEquivalent to WebPEncodeBGR, but compressing in a lossless …\nEquivalent to WebPEncodeBGRA, but compressing in a …\nEquivalent to WebPEncodeRGB, but compressing in a lossless …\nEquivalent to WebPEncodeRGBA, but compressing in a …\nReturns the size of the compressed data (pointed to by …\nReturns the size of the compressed data (pointed to by …\nEncoding error conditions.\nReleases memory returned by the <code>WebPDecode*()</code> functions …\nFree any memory associated with the buffer. Must always be …\nReturn the decoder’s version number, packed in …\nReturn the encoder’s version number, packed in …\nRetrieve features from the bitstream. The *features …\nRetrieve basic header information: width, height. This …\nCopies and decodes the next available data. Returns …\nReturns the RGB/A image decoded so far. Returns NULL if …\nDeprecated alpha-less version of WebPIDecGetYUVA(): it …\nSame as above function to get a YUVA image. Returns …\nInstantiate a new incremental decoder object with the …\nGeneric call to retrieve information about the displayable …\nDeletes the WebPIDecoder object and associated memory. …\nCreates a new incremental decoder with the supplied buffer …\nThis function allocates and initializes an …\nDeprecated version of the above, without the alpha plane. …\nThis function allocates and initializes an …\nA variant of the above function to be used when data …\nImage characteristics hint for the underlying encoder.\nInitialize the structure as empty. Must be called before …\nInitialize the configuration as empty. This function must …\nAllocates <code>size</code> bytes of memory. Returns NULL upon error. …\nThe custom writer to be used with WebPMemoryWriter as …\nWebPMemoryWrite: a special WebPWriterFunction that writes …\nThe following must be called to deallocate writer-&gt;mem …\nThe following must be called first before any use.\nMain exchange structure (input samples, output bytes, …\nConverts picture-&gt;argb data to the YUV420A format. The …\nSame as WebPPictureARGBToYUVA(), but the conversion is …\nConvenience allocation / deallocation based on …\nCopy the pixels of *src into *dst, using WebPPictureAlloc. …\nself-crops a picture to the rectangle defined by …\nCompute PSNR, SSIM or LSIM distortion metric between two …\nRelease the memory allocated by WebPPictureAlloc() or …\nScan the picture <code>picture</code> for the presence of non fully …\nVariants of the above WebPPictureImportRGB, but taking …\nVariants of the above WebPPictureImportRGB, but taking …\nVariants of the above WebPPictureImportRGB, but taking …\nColorspace conversion function to import RGB samples. …\nSame as WebPPictureImportRGB, but for RGBA buffer.\nSame as WebPPictureImportRGB, but for RGBA buffer. Imports …\nShould always be called, to initialize the structure. …\nReturns true if the <code>picture</code> is actually a view and …\nRescale a picture to new dimension width x height. If …\nPerforms <code>sharp</code> RGBA-&gt;YUVA420 downsampling and colorspace …\nkept for backward compatibility:\nExtracts a view from <code>src</code> picture into <code>dst</code>. The rectangle …\nConverts picture-&gt;yuv to picture-&gt;argb and sets …\nCompute the single distortion for packed planes of samples.\nEnumerate some predefined settings for WebPConfig, …\nProgress hook, called from time to time to report …\nview as RGBA\nReturns true if <code>config</code> is non-NULL and all configuration …\nSignature for output function. Should return true if …\nview as YUVA\npointer to alpha samples\npointer to the alpha plane\nalpha-plane size\nalpha stride\nstride of the alpha plane\nAlgorithm for encoding the alpha plane (0 = none, 1 = …\nsize of the transparency data\nalpha dithering strength in [0..100]\nPredictive filtering method for alpha plane. 0: none, 1: …\nBetween 0 (smallest size) and 100 (lossless). Default is …\nPointer to argb (32 bit) plane.\nThis is stride in pixels units, not bytes.\nAuto adjust filter’s strength [0 = off, 1 = on]\nnumber of intra4/intra16/skipped macroblocks\nif true, skip the in-loop filtering\nnumber of bits for color cache lookup\nfinal size\nColorspace.\ncolorspace: should be YUV420 for now (=Y’CbCr).\nheight of the cropping area\nleft position for cropping. Will be snapped to even value.\ntop position for cropping. Will be snapped to even value.\nwidth of the cropping area\ncan be used by the writer.\ndithering strength (0=Off, 100=full)\nIf true, compression parameters will be remapped to better …\nError code for the latest error encountered during encoding\nif non-zero, preserve the exact RGB values under …\nif not NULL, points to an array of size ((width + 15) / …\n1: intra type, 2: segment, 3: quant 4: intra-16 prediction …\nrange: [0 = off .. 7 = least sharp]\nrange: [0 = off .. 100 = strongest]\nfiltering type: 0 = simple, 1 = strong (only used if …\nif true, flip output vertically\n0 = undefined (/mixed), 1 = lossy, 2 = lossless\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrue if the bitstream contains an alpha channel.\nTrue if the bitstream is an animation.\napproximate number of bytes spent for header and …\nDimension (height).\nHeight in pixels, as read from the bitstream.\ndimensions (less or equal to WEBP_MAX_DIMENSION)\nnumber of precision bits of histogram\nHint for image type (lossless only for now).\nImmutable bitstream features (optional)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf non-zero, ‘internal_memory’ pointer is not used. If …\nsize of the enhancement layer data\nLossless encoding (0=lossy(default), 1=lossless).\nlossless image data size\nbit0:predictor bit1:cross-color transform …\nlossless header (transform, huffman etc) size\nfinal lossless size\nIf set, reduce memory usage (but increase CPU use).\nquality/speed trade-off (0=fast, 6=slower-better)\nNear lossless encoding [0 = max loss .. 100 = off (default)…\nif true, use faster pointwise upsampler\nDecoding options\nOutput buffer (can point to external mem)\npadding for later use\nnumber of color in palette, if used\nquality degradation allowed to fit the 512k limit on …\nlog2(number of token partitions) in [0..3]. Default is set …\nnumber of entropy-analysis passes (in [1..10]).\npreprocessing filter: 0=none, 1=segment-smooth, …\nIf not NULL, report progress during encoding.\nmaximum permissible quality factor\nminimum permissible quality factor\nbetween 0 and 100. For lossy, 0 gives the smallest size …\napproximate number of bytes spent for DC/AC/uv …\npointer to RGBA samples\nfinal resolution height\nfinal resolution width\nfiltering strength for each segments [0..63]\nquantizer values for each segments\nnumber of macroblocks in each segments\nmaximum number of segments to use, in [1..4]\nif true, export the compressed picture back. In-loop …\ntotal size of the *rgba buffer.\nSpatial Noise Shaping. 0=off, 100=maximum.\nPointer to side statistics (updated only if not NULL)\nstride in bytes from one scanline to the next.\nif non-zero, specifies the minimal distortion to try to …\nif non-zero, set the desired target size in bytes. Takes …\nIf non-zero, try and use multi-threaded encoding.\nprecision bits for predictor transform\npointer to chroma U samples\nNameless union of buffer parameters.\npointers to luma/chroma planes.\nchroma U plane size\nchroma U stride\nMain flag for encoder selecting between ARGB or YUV input. …\nif true, cropping is applied <em>first</em>\nreserved\nif true, scaling is applied <em>afterward</em>\nif needed, use sharp (and slow) RGB-&gt;YUV conversion\nif true, use multi-threaded decoding\nthis field is free to be set to any value and used during …\nluma/chroma strides.\npointer to chroma V samples\npointers to luma/chroma planes.\nchroma V planes size\nchroma V stride\nDimension (width).\nWidth in pixels, as read from the bitstream.\ndimensions (less or equal to WEBP_MAX_DIMENSION)\ncan be NULL\npointer to luma samples\npointers to luma/chroma planes.\nluma plane size\nluma stride\nluma/chroma strides.")