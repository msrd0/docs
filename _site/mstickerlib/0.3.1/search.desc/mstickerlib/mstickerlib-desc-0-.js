searchState.loadedDescShard("mstickerlib", 0, "<strong>WARINING: this crate is unstable und still have many </strong>…\nset the crate wide reqwest::Client. This function should …\nDatabase which stores mappings from hashes to matrix media …\nDummy database to be used as default generic. This …\nsimple implemtation of the <code>Database</code> traid, with does save …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nsadly we do not get more information about the error from …\nto avoid that this struct is generic for the database …\nTelegram api has return an error\nIf the api request has try to upload an sticker, the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nentry is a Result, since getting the error itself can also …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nGeneric image struct, containing the image data and its …\nconvert <code>tgs</code> image to webp or gif, ignore other formats\nconvert <code>webm</code> video stickers to webp, ignore other formats\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nunpack gzip compression <code>tgs</code>, converting it to <code>lottie</code>, …\nupload image to matrix return mxc_url and true if image …\nsee …\nMatrix file url.\nfile data of the url, if cached\nsee …\nA human-readable error message.\nfetch data, if not cached\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncreate new Mxc from matrix url and optional assioated file …\nratelimit timeout\nCurrent different StickerPack formats exists for Matrix. …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nGet field <code>url</code> from instance of <code>Mxc</code>.\nMatrix Image struct, containing url and meta_data\ninfo about the original telegram sticker this field should …\nunicode emoji with are assioted with the sticker\nabbreviation for the sticker, to be used inline\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\npack where the sticker is from\nStickerpacks for the maunium stickerpicker, which can be …\nPonies(MSC2545) are the new upcomming matrix sticker …\nadditonal informations about the original telegram …\ninformation about the telegram pack, which was imported\nadditonal informations about the original telegram sticker …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nmust always be “m.sticker”, use <code>Default::default</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nadditonal informations about the original telegram sticker …\nReturns the argument unchanged.\nReturns the argument unchanged.\nunique id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nadditonal, optional configuration for importing stickers\nsee https://core.telegram.org/bots/api#photosize\nanimaton format, to which animated sticker will be …\ndatabase to track, which files was already uploaded, to …\ndownload the image of the PhotoSize\nDo not upload anythink to matirx. <strong>WARNING:</strong> the generate …\nEmoji associated with the sticker.\nIdentifier for this file, which can be used to download or …\nUnique identifier for this file, which is supposed to be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRequest a stickerpack by its name.\nSticker height\nIdentifier for this file, which can be used to download or …\nImport sticker to matrix\nImport this pack to matrix.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the sticker is animated.\nTrue if the sticker is a video sticker.\nDo not convert animated sticker and keep lootie files. …\nDo not convert video stickers and keep webm. Import of …\nGet field <code>name</code> from instance of <code>StickerPack</code>.\nGet field <code>pack_name</code> from instance of <code>Sticker</code>.\nConvert telegram stickerpack url to pack name.\nPositon in the stickerpack\nGet field <code>stickers</code> from instance of <code>StickerPack</code>.\nGet field <code>thumbnail</code> from instance of <code>Sticker</code>.\nGet field <code>title</code> from instance of <code>StickerPack</code>.\nSticker width")