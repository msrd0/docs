searchState.loadedDescShard("libwebp_sys", 0, "No value.\nNo value.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nEnumeration of the status codes\nMacro to check ABI compatibility (same major revision …\nFeatures gathered from the bitstream\nOutput buffer\nNon-incremental version. This version decodes the full …\nSame as WebPDecodeRGBA, but returning A, R, G, B, A, R, G, …\nSame as WebPDecodeRGB, but returning B, G, R, B, G, R… …\nSame as WebPDecodeRGBA, but returning B, G, R, A, B, G, R, …\nSame as WebPDecodeRGBA, but returning R, G, B, R, G, B… …\nDecodes WebP images pointed to by ‘data’ and returns …\nDecode WebP images pointed to by ‘data’ to Y’UV …\nWebPDecodeYUVInto() is a variant of WebPDecodeYUV() that …\nMain object storing the configuration for advanced …\nDecoding options\nReleases memory returned by the <code>WebPDecode*()</code> functions …\nFree any memory associated with the buffer. Must always be …\nReturn the decoder’s version number, packed in …\nRetrieve features from the bitstream. The *features …\nRetrieve basic header information: width, height. This …\nCopies and decodes the next available data. Returns …\nReturns the RGB/A image decoded so far. Returns NULL if …\nDeprecated alpha-less version of WebPIDecGetYUVA(): it …\nSame as above function to get a YUVA image. Returns …\nInstantiate a new incremental decoder object with the …\nGeneric call to retrieve information about the displayable …\nDeletes the WebPIDecoder object and associated memory. …\nCreates a new incremental decoder with the supplied buffer …\nThis function allocates and initializes an …\nDeprecated version of the above, without the alpha plane. …\nThis function allocates and initializes an …\nA variant of the above function to be used when data …\nInitialize the structure as empty. Must be called before …\nInitialize the configuration as empty. This function must …\nAllocates <code>size</code> bytes of memory. Returns NULL upon error. …\nview as RGBA\nview as YUVA\npointer to alpha samples\nalpha-plane size\nalpha stride\nalpha dithering strength in [0..100]\nif true, skip the in-loop filtering\nColorspace.\nheight of the cropping area\nleft position for cropping. Will be snapped to even value.\ntop position for cropping. Will be snapped to even value.\nwidth of the cropping area\ndithering strength (0=Off, 100=full)\nif true, flip output vertically\n0 = undefined (/mixed), 1 = lossy, 2 = lossless\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrue if the bitstream contains an alpha channel.\nTrue if the bitstream is an animation.\nDimension (height).\nHeight in pixels, as read from the bitstream.\nImmutable bitstream features (optional)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf non-zero, ‘internal_memory’ pointer is not used. If …\nif true, use faster pointwise upsampler\nDecoding options\nOutput buffer (can point to external mem)\npadding for later use\npointer to RGBA samples\nfinal resolution height\nfinal resolution width\ntotal size of the *rgba buffer.\nstride in bytes from one scanline to the next.\npointer to chroma U samples\nNameless union of buffer parameters.\nchroma U plane size\nchroma U stride\nif true, cropping is applied <em>first</em>\nif true, scaling is applied <em>afterward</em>\nif true, use multi-threaded decoding\npointer to chroma V samples\nchroma V planes size\nchroma V stride\nDimension (width).\nWidth in pixels, as read from the bitstream.\npointer to luma samples\nluma plane size\nluma stride")