searchState.loadedDescShard("rgb", 0, "Basic struct for <code>RGB</code> and <code>RGBA</code> pixels. Packed, with red …\nCasts a slice of bytes into a slice of pixels, e.g. <code>[u8]</code> …\nSame as <code>ComponentMap</code>, but doesn’t change the alpha …\nApplying operation to every component\nCasting the struct to slices of its components\nCast a slice of component values (bytes) as a slice of …\nThe RGB pixel\n16-bit RGB in machine’s native endian\n8-bit RGB\nThe RGBA pixel\n16-bit RGB in machine’s native endian. 0 = transparent, …\n8-bit RGBA, alpha is last. 0 = transparent, 255 = opaque.\nAlpha\nAlpha\nAlpha\nConvenience function for converting to RGBA\nCreate a new RGBA with the new alpha value, but same RGB …\nBGR/BGRA alernative layouts &amp; grayscale\nReinterpert slice as reverse-order BGR pixels\nReinterpert ntable slice as reverse-order BGR pixels\nReinterpert slice as reverse-order BGRA pixels\nReinterpert mutable slice as reverse-order alpha-last BGRA …\nReinterpert mutable slice as grayscale pixels\nReinterpert mutable slice as grayscale pixels with alpha\nReinterpert mutable slice as grayscale pixels with alpha\nReinterpert mutable slice as grayscale pixels\nThe components interpreted as a mutable array, e.g. one <code>RGB</code>…\nReinterpret the slice as a read-only/shared slice of …\nReinterpret the slice as a mutable/exclusive slice of …\nReinterpert slice as RGB pixels\nReinterpert mutable slice as RGB pixels\nReinterpert slice as RGBA pixels\nReinterpert mutable slice as RGBA pixels\nThe components interpreted as an array, e.g. one <code>RGB</code> …\nBlue\nBlue\nBlue\nBlue\nBlue\nBlue\nCopy RGB components out of the RGBA struct\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes exactly 3 elements from the iterator and creates a …\nTakes exactly 4 elements from the iterator and creates a …\nGreen\nGreen\nGreen\nGreen\nGreen\nGreen\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over color components (R, G, and B)\nIterate over all components (length=4)\nConvenience function (equivalent of …\nCreate a new RGBA with a new alpha value created by the …\nConvenience function for applying the same formula to …\nCreate new RGBA with the same alpha value, but different …\nConvenience function for creating a new pixel The order of …\nConvenience function for creating a new pixel The order of …\nConvenience function for converting to RGBA with alpha …\nConvenience function for creating a new pixel The order of …\nRed\nRed\nRed\nRed\nRed\nRed\nCopy RGB components out of the RGBA struct\nProvide a mutable view of only RGB components (leaving out …\nRGB in reverse byte order\n16-bit BGR in machine’s native endian\n8-bit BGR\nBGR+A\n16-bit BGR in machine’s native endian\n8-bit BGRA\n16-bit gray in machine’s native endian\n8-bit gray\n16-bit gray with alpha in machine’s native endian\n8-bit gray with alpha in machine’s native endian\nGrayscale. Use <code>.0</code> or <code>*</code> (deref) to access the value.\nGrayscale with alpha. Use <code>.0</code>/<code>.1</code> to access.\nAlpha last\nAlpha last\nAlpha last\nConvenience function for converting to RGBA\nCreate a new RGBA with the new alpha value, but same RGB …\nCreate a new <code>GrayAlpha</code> with the new alpha value, but same …\nBlue first\nBlue first\nBlue first\nBlue first\nBlue first\nBlue first\nCopy RGB components out of the RGBA struct\nProvide a mutable view of only RGB components (leaving out …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGreen\nGreen\nGreen\nGreen\nGreen\nGreen\nCopy <code>Gray</code> component out of the <code>GrayAlpha</code> struct\nProvide a mutable view of only <code>Gray</code> component (leaving out …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over color components (R, G, and B)\nIterate over all components (length=4)\nCreate a new RGBA with a new alpha value created by the …\nCreate a new <code>GrayAlpha</code> with a new alpha value created by …\nCreate new <code>GrayAlpha</code> with the same alpha value, but …\nCreate new RGBA with the same alpha value, but different …\nConvenience function for creating a new pixel Wargning: …\nConvenience function for creating a new pixel Warning: The …\nNew grayscale pixel\nNew grayscale+alpha pixel\nConvenience function for converting to RGBA with alpha …\nConvenience function for creating a new pixel Warning: The …\nRed last\nRed last\nRed\nRed\nRed last\nRed\nCopy RGB components out of the RGBA struct\nProvide a mutable view of only RGB components (leaving out …")