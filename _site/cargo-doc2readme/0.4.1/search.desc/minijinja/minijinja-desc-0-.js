searchState.loadedDescShard("minijinja", 0, "MiniJinja is a powerful but minimal dependency template …\nControls the autoescaping behavior.\nA bad escape sequence in a string was encountered.\nAn error happened in an include.\nNot able to serialize this value.\nUnable to unpack a value.\nLike <code>Lenient</code>, but also allows chaining of undefined …\nA custom auto escape format.\nAn abstraction that holds the engine configuration.\nRepresents template errors.\nAn enum describing the error kind.\nAn error happened in a super block.\nA handle to a compiled expression.\nUse HTML auto escaping rules.\nHelper to HTML escape a string.\nAn invalid operation was attempted.\nThe default, somewhat lenient undefined behavior.\nA expected argument was missing\nA value is not valid for a key in a map.\nA non primitive value was encountered where one was …\nDo not apply auto escaping.\nAn abstraction over <code>fmt::Write</code> for the rendering.\nProvides access to the current execution state of the …\nComplains very quickly about undefined values.\nThe template has a syntax error\nRepresents a handle to a template.\nA template was not found.\nToo many arguments were passed to a function.\nDefines the behavior of undefined values in the engine.\nAn operation on an undefined value was attempted.\nA filter is unknown\nA function is unknown\nUn unknown method was called\nA test is unknown\nRe-export for convenience.\nFailed writing output.\nAdds a new filter function.\nAdds a new global function.\nAdds a global variable.\nLoads a template from a string into the environment.\nAdds a new test function.\nInvokes a filter with some arguments.\nAn utility macro to create arguments for function calls.\nReturns the current value of the auto escape flag.\nRemoves all stored templates.\nCompiles an expression.\nCreates a template context from keys and values or merging …\nReturns the name of the innermost block.\nReturns the current value of the debug flag.\nThe default logic for auto escaping based on file …\nReturns the error detail\nHelper function that renders all known debug info on …\nCreates a completely empty environment.\nReturns an empty <code>State</code> for testing purposes and similar.\nReturns a reference to the current environment.\nThe default formatter.\nEvaluates the expression with some context.\nEvaluates the template into a <code>State</code>.\nReturns a list of the names of all exports (top-level …\nFilter functions and abstractions.\nFormats a value to a string using the formatter on the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlobal functions and abstractions.\nFetches a template by name with path joining.\nFetches a template by name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value of the trailing newline preservation …\nReturns the error kind\nReturns the line number where the error occurred.\nLooks up a variable by name in the context.\nReturns the value of the lstrip blocks flag.\nReturns the filename of the template that caused the error.\nReturns the name of the current template.\nReturns the name of the template.\nCreates a new error with kind and detail.\nCreates a new environment with sensible defaults.\nCreates an empty <code>State</code> for this template.\nInvokes a test function on a value.\nReturns the byte range of where the error occurred if …\nReturns the current max recursion limit.\nRemoves a filter by name.\nRemoves a global function or variable by name.\nRemoves a template by name.\nRemoves a test by name.\nRenders the template into a string.\nA macro similar to <code>format!</code> but that uses MiniJinja for …\nLike <code>render</code> but also return the evaluated <code>State</code>.\nParses and renders a template from a string in one go with …\nParses and renders a template from a string in one go.\nRenders the template into an <code>io::Write</code>.\nSets a new function to select the default auto escaping.\nEnable or disable the debug mode.\nSets a different formatter function.\nPreserve the trailing newline when rendering templates.\nRemove leading spaces and tabs from the start of a line to …\nSets a callback to join template paths.\nReconfigures the runtime recursion limit.\nRemove the first newline after a block.\nChanges the undefined behavior.\nSets a callback invoked for unknown methods on objects.\nReturns the source code of the template.\nDocuments the syntax for templates.\nLoads a template from a string.\nLoads a template from a string, with name <code>&lt;string&gt;</code>.\nReturns the template source if available.\nTest functions and abstractions.\nReturns the value of the trim blocks flag.\nReturns a set of all undeclared variables in the …\nReturns a set of all undeclared variables in the template.\nReturns the current undefined behavior.\nReturns the current undefined behavior.\nProvides a dynamic value type abstraction.\nAttaches another error as source to this error.\nWrites some formatted information into this instance.\nWrites some data to the underlying buffer contained within …\nA utility trait that represents filters.\nReturns the absolute value of a number.\nLooks up an attribute.\nBatch items.\nConverts the value into a boolean value.\nConvert the string with all its characters lowercased …\nIf the value is undefined it will return the passed …\nDict sorting functionality.\nEscapes a string.  By default to HTML.\nReturns the first item from a list.\nConverts a value into a float.\nindents Value with spaces\nConverts a value into an integer.\nReturns a list of pairs (items) from a mapping.\nJoins a sequence by a character\nReturns the last item from a list.\nReturns the “length” of the value\nConverts the input value into a list.\nConverts a value to lowercase.\nApplies a filter to a sequence of objects or looks up an …\nReturns the largest item from the list.\nReturns the smallest item from the list.\nPretty print a variable.\nCreates a new sequence of values that don’t pass a test.\nCreates a new sequence of values of which an attribute …\nDoes a string replace.\nReverses a list or string\nRound the number to a given precision.\nMarks a value as safe.  This converts it into a string.\nCreates a new sequence of values that pass a test.\nCreates a new sequence of values of which an attribute …\nSlice an iterable and return a list of lists containing …\nReturns the sorted version of the given list.\nConverts a value to title case.\nTrims a value\nReturns a list of unique items from the given iterable.\nConverts a value to uppercase.\nURL encodes a value.\nA utility trait that represents global functions.\nOutputs the current context or the arguments stringified.\nCreates a dictionary.\nCreates a new container that allows attribute assignment …\nReturns a range.\nA utility trait that represents test functions.\nA utility trait that represents the return value of …\nChecks if a value is defined.\nChecks if the value is ending with a string.\nTest version of <code>==</code>.\nChecks if a value is even.\nChecks if a value is <code>false</code>.\nChecks if a filter with a given name is available.\nChecks if this value is a float\nTest version of <code>&gt;=</code>.\nTest version of <code>&gt;</code>.\nTest version of <code>in</code>.\nChecks if this value is an integer.\nTest version of <code>&lt;=</code>.\nTest version of <code>&lt;</code>.\nChecks if this value is a mapping\nTest version of <code>!=</code>.\nChecks if a value is none.\nChecks if this value is a number.\nChecks if a value is odd.\nChecks if a value is safe.\nChecks if this value is a sequence\nChecks if the value is starting with a string.\nChecks if this value is a string.\nChecks if a test with a given name is available.\nChecks if a value is <code>true</code>.\nChecks if a value is undefined.\nA trait implemented by all filter/test argument types.\nThe value is a <code>bool</code>\nThe value is a byte array.\nHelper trait representing valid filter, test and function …\nA utility trait that represents the return value of …\nThis object is an iterator that yields new values.\nRepresents a dynamic iterable.\nUtility to accept keyword arguments.\nThe value is a key/value mapping.\nThe value is the none singleton ([<code>()</code>])\nThe value is a number of a supported type.\nA utility trait that represents a dynamic object.\nA kind defines the object’s behavior.\nThe output type of the function arguments.\nThe output type of this argument.\nThis object is a plain object.\nUtility type to capture remaining arguments.\nThis object is a sequence.\nThe value is an array of other values.\nProvides the behavior of an <code>Object</code> holding sequence of …\nIterates over <code>SeqObject</code>\nThe value is a string.\nThis object is a struct (map with string keys).\nProvides the behavior of an <code>Object</code> holding a struct.\nThe undefined value.\nThe value is undefined\nRepresents a dynamically typed value in the template …\nIterates over a value.\nDescribes the kind of value.\nIterates over all passed keyword arguments.\nReturns the bytes of this value if they exist.\nIf the value is an object, it’s returned as <code>Object</code>.\nIf the value is a sequence it’s returned as <code>SeqObject</code>.\nIf the value is a string, return it.\nIf the value is a struct, return it as <code>StructObject</code>.\nAsserts that all kwargs were used.\nCalled when the object is invoked directly.\nCalled when the object is invoked directly.\nCalls the value directly.\nCalled when the engine tries to call a method on the …\nCalled when the engine tries to call a method on the …\nCalls a method on the value.\nReturns some reference to the boxed object if it is of …\nReturns some reference to the boxed object if it is of …\nReturns the number of fields.\nReturns the number of fields.\nReturns a vector of field names.\nReturns a vector of field names.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUtility function to convert a slice of values into …\nCreates a callable value from a function.\nDeprecated alternative to <code>Value::make_one_shot_iterator</code>.\nCreates a value from a dynamic object.\nCreates a value from a safe string.\nCreates a value from an owned <code>SeqObject</code>.\nDeprecated original name of <code>Value::from_serialize</code>.\nCreates a value from something that can be serialized.\nCreates a value from an owned <code>StructObject</code>.\nGets a single argument from the kwargs and marks it as …\nLooks up an attribute by attribute name.\nInvoked by the engine to get a field of a struct.\nLooks up an item by index.\nLooks up an item (or attribute) by key.\nLooks up an index of the value.\nChecks if a keyword argument exists.\nIntern a string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the object is of a specific type.\nReturns <code>true</code> if the map represents keyword arguments.\nReturns <code>true</code> if this value is none.\nReturns <code>true</code> if the value is a number.\nReturns <code>true</code> if this value is safe.\nIs this value true?\nReturns <code>true</code> if this value is undefined.\nReturns the number of items in the sequence.\nConvenient iterator over a <code>SeqObject</code>.\nReturns the exact size of the iterator if known.\nReturns the exact size of the iterator if known.\nDescribes the kind of an object.\nDescribes the kind of an object.\nReturns the kind of the value.\nReturns the length of the contained value.\nCreates a value from an iterator.\nProduces the next value from the iterator.\nGet a single argument from the kwargs but don’t mark it …\nFunction that returns true when serialization for <code>Value</code> is …\nIf possible returns a static vector of field names.\nIf possible returns a static vector of field names.\nIterates over the value.")