searchState.loadedDescShard("ariadne", 0, "Ariadne\nThe report is advice to the user about a potential …\nASCII-only characters.\nBlack #0 (foreground code <code>30</code>, background code <code>40</code>).\nBlue: #4 (foreground code <code>34</code>, background code <code>44</code>).\nA trait implemented by <code>Source</code> caches.\nPossible character sets to use when rendering diagnostics.\nAn enum representing an ANSI color code.\nA type that can generate distinct 8-bit colors.\nA type used to configure a report\nThe report is of a kind not built into Ariadne.\nCyan: #6 (foreground code <code>36</code>, background code <code>46</code>).\nTerminal default #9. (foreground code <code>39</code>, background code …\nArrows should attach to the end of the label span.\nThe report is an error and indicates a critical problem …\nA <code>Cache</code> that fetches <code>Source</code>s from the filesystem.\nA color number from 0 to 255, for use in 256-color …\nA trait used to add formatting attributes to displayable …\nA <code>Cache</code> that fetches <code>Source</code>s using the provided function.\nGreen: #2 (foreground code <code>32</code>, background code <code>42</code>).\nA type that represents a labelled section of source code.\nThe attachment point of inline label arrows\nA type representing a single line of a <code>Source</code>.\nMagenta: #5 (foreground code <code>35</code>, background code <code>45</code>).\nArrows should attach to the middle of the label span (or …\nA 24-bit RGB color, as specified by ISO-8613-3.\nRed: #1 (foreground code <code>31</code>, background code <code>41</code>).\nA type representing a diagnostic that is ready to be …\nA type used to build a <code>Report</code>.\nA type that defines the kind of report being produced.\nA type representing a single source that may be referred …\nThe identifier used to uniquely refer to a source. In most …\nA trait implemented by spans within a character-based …\nArrows should attach to the start of the label span.\nA trait used to add formatting attributes to displayable …\nThe type used to store the string data for this cache.\nUnicode characters (an attempt is made to use only …\nNo color has been set. Nothing is changed when applied.\nThe report is a warning and indicates a likely problem, …\nWhite: #7 (foreground code <code>37</code>, background code <code>47</code>).\nYellow: #3 (foreground code <code>33</code>, background code <code>43</code>).\nAdd a label to the report.\nAdd multiple labels to the report.\nGive this value the specified background colour.\nGive this value the specified background colour.\nGive this value the specified background colour, when …\nGive this value the specified background colour, when …\nBegin building a new <code>Report</code>.\nReturn an iterator over the characters in the source.\nDetermine whether the span contains the given offset.\nDisplay the given ID. as a single inline value.\nGet the (exclusive) end offset of this span.\nWrite this diagnostic out to <code>stderr</code>.\nFetch the <code>Source</code> identified by the given ID, if possible.\nGive this value the specified foreground colour.\nGive this value the specified foreground colour.\nGive this value the specified foreground colour, when …\nGive this value the specified foreground colour, when …\nFinish building the <code>Report</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a <code>Source</code> from the given <code>str</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>ColorGenerator</code> with the given pre-chosen …\nGet the range of lines that this span runs across.\nGet the source text for a line, excluding trailing …\nGet the line that the given offset appears on, and the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the length of this span (difference between the start …\nGet the character length of this line.\nGet the length of the total number of characters in the …\nGet access to a specific, zero-indexed <code>Line</code>.\nReturn an iterator over the <code>Line</code>s in this source.\nCreate a new <code>ColorGenerator</code> with the default state.\nCreate a new <code>FnCache</code> with the given fetch function.\nCreate a new <code>Label</code>. If the span is specified as a …\nGenerate the next colour in the sequence.\nGet the offset of this line in the original <code>Source</code> (i.e: …\nConstructs a new <code>Paint</code> structure that encapsulates <code>item</code> …\nWrite this diagnostic out to <code>stdout</code>.\nSet the help message of this report.\nSet the message of this report.\nSet the note of this report.\nGet the identifier of the source that this span refers to.\nCreate a <code>Cache</code> from a collection of ID/strings, where each …\nGet the offset span of this line in the original <code>Source</code>.\nGet the start offset of this span.\nConstructs a new <code>Style</code> structure with the foreground color …\nWhat character set should be used to display dynamic …\nGive this report a numerical code that may be used to more …\nGive this label a highlight colour.\nShould colored output should be enabled?\nShould the report remove gaps to minimise used space?\nUse the given <code>Config</code> to determine diagnostic attributes.\nWhen label lines cross one-another, should there be a gap?\nSet the help message of this report.\nAdd a label to the report.\nWhere should inline labels attach to their spans?\nAdd multiple labels to the report.\nAdd a message to this report.\nGive this label a message.\nShould arrows be used to point to the bounds of multi-line …\nSet the note of this report.\nSpecify the order of this label relative to other labels.\nSpecify the priority of this label relative to other …\nPre-insert a selection of <code>Source</code>s into this cache.\nHow many characters width should tab characters be?\nShould underlines be used for label span where possible?\nWrite this diagnostic to an implementor of <code>Write</code>.\nWrite this diagnostic to an implementor of <code>Write</code>, assuming …")