searchState.loadedDescShard("gotham", 0, "Gotham – A flexible web framework that promotes …\nI/O error.\nThe error that can occur when starting the gotham server.\nRe-export anyhow\nReturns a <code>Future</code> used to spawn a Gotham application.\nRe-export cookie\nExtracts request data into type-safe structs using Serde.\nReturns the argument unchanged.\nDefines types for handlers, the primary building block of …\nHelpers, e.g. for HTTP request handling and response …\nRe-export hyper\nCalls <code>U::from(self)</code>.\nDefines types for <code>Middleware</code>, a reusable unit of logic …\nRe-export mime\nDefines types for a middleware pipeline\nFunctions for creating a Gotham service using HTTP.\nA collection of useful traits and macros that should …\nDefines the Gotham <code>Router</code> and supporting types.\nDefines the <code>GothamService</code> type which is used to wrap a …\nDefines types for passing request state through <code>Middleware</code> …\nA <code>PathExtractor</code> that does not extract/store any data from …\nA <code>QueryStringExtractor</code> that does not extract/store any …\nDefines a binding for storing the dynamic segments of the …\nDefines a binding for storing the query parameters from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a handler for any files under a directory.\nContains the error value\nContains the error value\nRepresents a handler for a single file.\nOptions to pass to file or dir handlers. Allows overriding …\nResponsible for extracting the file path matched by the …\nA <code>Handler</code> is an asynchronous function, taking a <code>State</code> …\nDescribes an error which occurred during handler …\nA type alias for the trait objects returned by …\nA type alias for the results returned by async fns that …\nThe type of <code>Handler</code> created by the <code>NewHandler</code>.\nRepresents a type which can be converted into the future …\nRepresents a type which can be converted to a response. …\nThis trait allows you to convert a <code>Result</code>’s <code>Err</code> case …\nThis trait allows you to convert a <code>Result</code>’s <code>Err</code> case …\nA type which is used to spawn new <code>Handler</code> values. When …\nContains the success value\nContains the success value\nA type alias for the results returned by async fns that …\nClones <code>self</code> to return an owned value for passing to a …\nReturns the cause of this error by reference.\nAttempt to downcast the cause by mutable reference.\nAttempt to downcast the cause by reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles the request, returning a boxed future which …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the cause of this error.\nConverts this value into a boxed future resolving to a …\nConverts this value into a <code>hyper::Response</code>\nEquivalent of …\nEquivalent of …\nCreate a new <code>DirHandler</code> with the given root path.\nCreate a new <code>FileHandler</code> for the given path.\nCreate a new <code>FileOptions</code> with default values.\nCreate and return a new <code>Handler</code> value.\nReturns the HTTP status code associated with this …\nIf <code>true</code>, given a request for FILE, serves FILE.br if it …\nSets the maximum buffer size to be used when serving the …\nSets the “cache_control” header in static file …\nIf <code>true</code>, given a request for FILE, serves FILE.gz if it …\nSets the HTTP status code of the response which is …\nHelpers for HTTP request handling and response generation\nRepresents data that has been successfully decoded from a …\nRepresents data that has been successfully percent decoded …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeaders recognised by Gotham which do not exist in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelpers for HTTP request handling\nHelpers for HTTP response generation\nMarks the identifier of a request to a Gotham server.\nMarks the execution time of a Gotham request.\nDefines helper functions for processing the request path\nDefines helper functions for the Request query string\nHolder for <code>Request</code> URI path segments that have been split …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProduces a simple empty <code>Response</code> with a provided status.\nProduces a simple empty <code>Response</code> with a <code>Location</code> header …\nCreates a <code>Response</code> object and populates it with a set of …\nProduces a simple empty <code>Response</code> with a <code>Location</code> header …\nThe type of <code>Middleware</code> created by the <code>NewMiddleware</code>.\n<code>Middleware</code> has the opportunity to provide additional …\nA type which is used to spawn new <code>Middleware</code> values. When …\nEntry point to the middleware. To pass the request on to …\nDefines the types for connecting multiple middleware into …\nDefines a cookie parsing middleware to be attach cookies …\nMiddlewares for the Gotham framework to log on requests …\nCreate and return a new <code>Middleware</code> value.\nSecurity based middleware to handle security based …\nState driven middleware to enable attachment of values to …\nRequest timing middleware, used to measure response times …\nA struct that can act as a cookie parsing middleware for …\nAttaches a set of parsed cookies to the request state.\nReturns the argument unchanged.\nParses a <code>CookieJar</code> from a <code>State</code>.\nCalls <code>U::from(self)</code>.\nClones the current middleware to a new instance.\nA struct that can act as a logging middleware for Gotham.\nA struct that can act as a simple logging middleware for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>RequestLogger</code> instance.\nConstructs a new <code>SimpleLogger</code> instance.\nReturns a new middleware to be used to serve a request.\nReturns a new middleware to be used to serve a request.\nMiddleware binding for the Gotham security handlers.\nAttaches security headers to the response.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClones the current middleware to a new instance.\nMiddleware binding for generic types to enable easy shared …\nAttaches the inner generic value to the request state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new middleware binding, taking ownership of the …\nClones the current middleware to a new instance.\nMiddleware binding to attach request execution times …\nAttaches the request execution time to the response …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClones the current middleware to a new instance.\nA set of <code>Pipeline</code> instances that is currently being …\nWhen using middleware, one or more <code>Middleware</code> are combined …\nAllows a pipeline to be defined by adding <code>NewMiddleware</code> …\nA heterogeneous list of <code>Handle&lt;P, _&gt;</code> values, where <code>P</code> is a …\nRepresents the set of all <code>Pipeline</code> instances that are …\nA pipeline chain which contains only the single pipeline …\nA <code>Handle</code> for borrowing the only pipeline from a …\nA <code>PipelineSet</code> which contains only a single pipeline.\nAdds a <code>NewMiddleware</code> which will create a <code>Middleware</code> during …\nBuilds a <code>Pipeline</code>, which contains all middleware in the …\nInvokes this part of the <code>PipelineHandleChain</code>, with …\nWraps the current set of <code>Pipeline</code> instances into a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBegins defining a new pipeline.\nCreate an empty set of <code>Pipeline</code> instances.\nConstructs a pipeline from a single middleware.\nCreates a single pipeline for use in applications with …\nReturns a <code>Future</code> used to spawn an Gotham application.\nStarts a Gotham application on plain, unsecured HTTP.\nStarts a Gotham application with a designated number of …\nThe error type used for a non-matching route, as returned …\nResponsible for dispatching HTTP requests to defined …\nDefines a builder API for constructing a <code>Router</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles the <code>Request</code> by determining the correct <code>Route</code> from …\nTakes the intersection of two <code>RouteNonMatch</code> values, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>RouteNonMatch</code> value with the given HTTP …\nDefines <code>Router</code> functionality which acts on the <code>Response</code>\nDefines types that support individual application routes.\nDefines a hierarchial <code>Tree</code> with subtrees of <code>Node</code>.\nTakes the union of two <code>RouteNonMatch</code> values, producing a …\nAdds an allow list to a <code>RouteNonMatch</code>. Typically this is …\nImplements the methods required for associating a number …\nThe default type returned when building a single …\nDescribes the API for defining a single route, after …\nA delegated builder, which is created by …\nDefines functions used by a builder to determine which …\nDescribes the operation of extending a <code>RouteMatcher</code> on a …\nThe type returned when replacing the <code>PathExtractor</code> with …\nThe type returned when replacing the <code>QueryStringExtractor</code> …\nThe type returned when extending the existing <code>RouteMatcher</code> …\nDescribes the operation of replacing a <code>PathExtractor</code> on a …\nDescribes the operation of replacing a <code>QueryStringExtractor</code>…\nThe top-level builder which is created by <code>build_router</code> and …\nA scoped builder, which is created by <code>DrawRoutes::scope</code> …\nImplements the traits required to define a single route, …\nAdds a <code>ResponseExtender</code> to the <code>ResponseFinalizer</code> in the …\nAdds additional <code>RouteMatcher</code> requirements to the current …\nAdds aadditional <code>RouteMatcher</code> requirements to all …\nAdds additional <code>RouteMatcher</code> requirements to the current …\nBegins associating routes with a fixed path in the tree. …\nBegins associating routes with a fixed path in the tree. …\nBuilds a <code>Router</code> using the provided closure. Routes are …\nBuilds a <code>Router</code> with <strong>no</strong> middleware using the provided …\nBegins delegating a subpath of the tree.\nBegins delegating a subpath of the tree.\nBegins delegating a subpath of the tree, but does not …\nBegins delegating a subpath of the tree, but does not …\nAssociates a route which matches <code>DELETE</code> requests to the …\nCreates a route which matches <code>DELETE</code> requests to the given …\nCreates a route which matches <code>DELETE</code> requests to the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAssociates a route which matches <code>GET</code> requests to the …\nCreates a route which matches <strong>only</strong> <code>GET</code> requests to the …\nCreates a route which matches <strong>only</strong> <code>GET</code> requests to the …\nAssociates a route which matches <code>GET</code> or <code>HEAD</code> requests to …\nCreates a route which matches <code>GET</code> and <code>HEAD</code> requests to the …\nCreates a route which matches <code>GET</code> and <code>HEAD</code> requests to the …\nAssociates a route which matches <code>HEAD</code> requests to the …\nCreates a route which matches <code>HEAD</code> requests to the given …\nCreates a route which matches <code>HEAD</code> requests to the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an instance of AssociatedRouteBuilder\nAssociates a route which matches <code>OPTIONS</code> requests to the …\nCreates a route which matches <code>OPTIONS</code> requests to the …\nCreates a route which matches <code>OPTIONS</code> requests to the …\nAssociates a route which matches <code>PATCH</code> requests to the …\nCreates a route which matches <code>PATCH</code> requests to the given …\nCreates a route which matches <code>PATCH</code> requests to the given …\nAssociates a route which matches <code>POST</code> requests to the …\nCreates a route which matches <code>POST</code> requests to the given …\nCreates a route which matches <code>POST</code> requests to the given …\nAssociates a route which matches <code>PUT</code> requests to the …\nCreates a route which matches <code>PUT</code> requests to the given …\nCreates a route which matches <code>PUT</code> requests to the given …\nAssociates a route which matches requests with any of the …\nCreates a single route which matches any requests to the …\nCreates a single route which matches any requests to the …\nBegins defining a new scope, based on a given <code>path</code> prefix.\nBegins defining a new scope, based on a given <code>path</code> prefix.\nDirects the route to the given <code>Handler</code>, automatically …\nSimilar to <code>to</code>, but accepts an <code>async fn</code>\nDirects the route to the given <code>async fn</code>, passing <code>State</code> to …\nDirects the route to serve static files from the given …\nDirects the route to serve static files from the given …\nDirects the route to serve a single static file from the …\nDirects the route to serve a single static file from the …\nDirects the route to the given <code>NewHandler</code>. This gives more …\nDirects the delegated route to the given <code>Router</code>.\nApplies a <code>PathExtractor</code> type to the current route, to …\nBinds a new <code>PathExtractor</code> to the associated routes.\nBegins a new scope at the current location, with an …\nBegins a new scope at the current location, with an …\nApplies a <code>QueryStringExtractor</code> type to the current route, …\nBinds a new <code>QueryStringExtractor</code> to the associated routes.\nAn extender that does not alter the response.\nThe type of the response body. Almost always <code>hyper::Body</code>.\nAllow complex types to extend the <code>Response</code> based on …\nHolds an immutable collection of <code>ResponseExtender</code> values, …\nBuilds an immutable <code>ResponseFinalizer</code>.\nExtend the <code>Response</code> based on current <code>State</code> and <code>Response</code> …\nAdd an Finalizer for responses that have been assigned …\nExtend the response.\nExtend the Response\nFinalize population of error handlers for the application, …\nFinalize the <code>Response</code> if a <code>ResponseFinalizer</code> has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether this <code>Route</code> will dispatch the request to …\nThis <code>Route</code> is dispatching a request to another <code>Router</code> …\nReturned in the <code>Err</code> variant from <code>extract_query_string</code> or …\nExtractors used by <code>RouteImpl</code> to acquire request data and …\nThis <code>Route</code> is dispatching a request to a normal <code>NewHandler</code> …\nThe type of the response body. The requirements of Hyper …\nValues of the <code>Route</code> type are used by the <code>Router</code> to …\nConcrete type for a route in a Gotham web application. …\nDetermines if this <code>Route</code> intends to delegate requests to a …\nDefines the route <code>Dispatcher</code> and supporting types.\nDispatches the request to this <code>Route</code>, which will execute …\nExtends the <code>Response</code> object when the <code>PathExtractor</code> fails.\nExtends the <code>Response</code> object when query string extraction …\nExtracts the query string parameters and stores the …\nExtracts dynamic components of the <code>Request</code> path and stores …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if this <code>Route</code> should be invoked, based on the …\nDefines the type <code>RouteMatcher</code> and default implementations.\nCreates a new <code>RouteImpl</code> from the provided components.\nCreates a new set of Extractors for use with a <code>RouteImpl</code>\nUsed by <code>Router</code> to dispatch requests via pipelines and …\nDefault implementation of the <code>Dispatcher</code> trait.\nDispatches a request via pipelines and <code>Handler</code> represented …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>DispatcherImpl</code>.\nA <code>RouteMatcher</code> that succeeds when the <code>Request</code> has been …\nA route matcher that checks whether the value of the …\nAllows multiple <code>RouteMatcher</code> values to be combined when …\nMatches any request without restriction (i.e. will accept …\nA <code>RouteMatcher</code> that succeeds when the <code>Request</code> has been …\nAllow various types to represent themselves as a …\nA <code>RouteMatcher</code> that succeeds when the <code>Request</code> has been …\nThe concrete RouteMatcher each implementation will provide.\nDetermines if conditions required for the associated <code>Route</code> …\nModify this matcher to allow requests that don’t include …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform into a <code>RouteMatcher</code> of the the associated type …\nDetermines if the <code>Request</code> meets pre-defined conditions.\nDetermines if the <code>Request</code> was made using an <code>Accept</code> header …\nDetermines if the <code>Request</code> was made using a <code>Content-Type</code> …\nDetermines if the <code>Request</code> was made using a <code>Method</code> the …\nCreates a new <code>AcceptHeaderRouteMatcher</code>\nConstruct a new matcher that matches if the …\nCreates a new <code>AndRouteMatcher</code>\nCreates a new <code>AnyRouteMatcher</code>\nCreates a new <code>ContentTypeHeaderRouteMatcher</code> that does not …\nCreates a new <code>MethodOnlyRouteMatcher</code>.\nA hierarchical structure that provides a root <code>Node</code> and …\nAdds a direct child to the root of the <code>Tree</code>.\nAdds a <code>Route</code> be evaluated by the <code>Router</code> when the root of …\nBorrow the root <code>NodeBuilder</code> as mutable.\nReturns the argument unchanged.\nDetermines if a child <code>Node</code> representing the exact segment …\nCalls <code>U::from(self)</code>.\nCreates a new <code>Tree</code> and root <code>Node</code>.\nDefines <code>Node</code> for <code>Tree</code>.\nDefines the wrapping type for a segment-matching regex.\nDefines <code>SegmentType</code> for <code>Tree</code>.\nA recursive member of <code>Tree</code>, representative of segment(s) …\nAdds a new child <code>Node</code> instance to this <code>Node</code>.\nAdds a <code>Route</code> to this <code>Node</code>, to be potentially evaluated by …\nBorrows a child <code>Node</code> based on the defined segment bounds.\nBorrows a mutable child <code>Node</code> based on the defined segment …\nCompares two <code>Node</code> values to determine an appropriate …\nCompares two <code>Node</code> values for equality based on the …\nReturns the argument unchanged.\nDetermines if a child exists based on the defined segment …\nCalls <code>U::from(self)</code>.\nDetermines if this <code>Node</code> has any valid <code>Route</code> values …\nTraverses this <code>Node</code> and its children, attempting to a …\nCreates new <code>Node</code> for the given segment and type.\nCompares two <code>Node</code> values to determine an appropriate …\nRetrieves a reference to the contained segment value.\nDetermines if a <code>Route</code> instance associated with this <code>Node</code> …\nA unwind-safe wrapper for Regex that implements PartialEq, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new ConstrainedSegmentRegex from a provided …\nUses the supplied regex to determine match against …\nMatches any corresponding segment for incoming request …\nMatches multiple path segments until the end of the …\nMapping of segment names into the collection of values for …\nIndicates the type of segment which is being represented …\nIs matched exactly (string equality) to the segment for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegex used to match against a single segment of a request …\nInstantiates a <code>Handler</code> from the given <code>NewHandler</code>, and …\nA trait for accessing data that is stored in <code>State</code>.\nProvides storage for request state, and stores one item of …\nA marker trait for types that can be stored in <code>State</code>.\nBorrows a value from the <code>State</code> storage.\nBorrows a value from the <code>State</code> storage.\nMutably borrows a value from the <code>State</code> storage.\nMutably borrows a value from the <code>State</code> storage.\nReturns the client <code>SocketAddr</code> as reported by hyper, if one …\nReturns the argument unchanged.\nInstantiate a new <code>State</code> for a given <code>Request</code>. This is …\nDetermines if the current value exists in <code>State</code> storage.\nCalls <code>U::from(self)</code>.\nPuts a value into the <code>State</code> storage. One value of each …\nReturns the request ID associated with the current request.\nMoves a value out of the <code>State</code> storage and returns …\nMoves a value out of the <code>State</code> storage and returns …\nTries to borrow a value from the <code>State</code> storage.\nTries to borrow a value from the <code>State</code> storage.\nTries to mutably borrow a value from the <code>State</code> storage.\nTries to mutably borrow a value from the <code>State</code> storage.\nTries to move a value out of the <code>State</code> storage and return …\nTries to move a value out of the <code>State</code> storage and return …")