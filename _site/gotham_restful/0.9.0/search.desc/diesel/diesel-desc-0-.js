searchState.loadedDescShard("diesel", 0, "Diesel\nThis derives implements <code>diesel::Connection</code> and related …\nDeclare a new alias for a table\nAllow two or more columns which are otherwise unrelated to …\nAllow two or more tables which are otherwise unrelated to …\nTraits related to relationships between multiple tables.\nTypes which represent various database backends\nTypes related to database connections\nStructs to represent the primitive equivalent of SQL types …\nTakes a query <code>QueryFragment</code> expression as an argument and …\nCreates a <code>DELETE</code> statement.\nTypes and traits related to deserializing values from the …\nIncludes various helper types and bare functions which are …\nAST types representing various typed SQL expressions.\nAdds various methods to construct new expressions. These …\nProvide helper types for concisely writing the return type …\nUseful for libraries adding support for new SQL types. …\nCreates an <code>INSERT</code> statement for the target table.\nCreates an <code>INSERT [OR] IGNORE</code> statement.\nAllow two tables to be referenced in a join query without …\nRepresentation of migrations\nDeclare a 0 argument SQL function for use in your code. …\nIndicates that an expression allows all numeric operators. …\nImplements the Rust operator for a given type. If you …\nUseful for libraries adding support for new SQL types. …\nUseful for libraries adding support for new SQL types. …\nRe-exports important traits and types. Meant to be glob …\nContains traits responsible for the actual construction of …\nTraits that construct SELECT statements\nTypes related to describing schema, and interactions …\nConnection pooling via r2d2.\nCreates a <code>REPLACE</code> statement.\nErrors, type aliases, and functions related to working …\nContains the <code>Row</code> trait\nCreates a bare select statement, with no from clause. …\nTypes and traits related to serializing values for the …\nConstruct a full SQL query using raw SQL.\nTypes which represent a SQL data type.\nSpecifies that a table exists, and what columns it has. …\nCreates an <code>UPDATE</code> statement.\nTypes and functions related to PG’s and Sqlite’s …\nImplement required traits for the associations API\nIndicates that a type belongs to <code>Parent</code>\nThe foreign key of this struct\nThe database column representing the foreign key of the …\nThe <code>grouped_by</code> function groups records by their parent.\nThis trait indicates that a struct is associated with a …\nThe type of this struct’s identifier.\nThis trait indicates that a struct represents a single row …\nImplements <code>Identifiable</code> for references of the current type\nThe table this type is associated with.\nA type of error which can be returned when attempting to …\nReturns the foreign key for <code>self</code>\nReturns the foreign key column of this struct’s table\nReturns the argument unchanged.\nThe collection of records which were successfully indexed …\nSee the trait documentation.\nReturns the identifier for this record.\nCalls <code>U::from(self)</code>.\nCreates a <code>TryGroupedByError</code>.\nReturns the table this type is associated with.\nA fallible alternative to <code>GroupedBy::grouped_by</code>.\nA fallible alternative to <code>GroupedBy::grouped_by</code>.\nA fallible alternative to <code>GroupedBy::grouped_by</code>.\nThe collection of records that could not be indexed …\nConfigures how this backend supports aggregate function …\nConfigures how this backend structures <code>SELECT</code> queries\nConfigures how this backend handles <code>IN()</code> and <code>NOT IN()</code> …\nA database backend\nConfigures how this backend handles Batch insert statements\nThe concrete <code>BindCollector</code> implementation for this backend.\nConfigures whether built-in window functions require order …\nConfigures how this backend handles the Concat clauses in …\nConfigures how this backend handles the <code>DEFAULT VALUES</code> …\nConfigures how this backend handles empty <code>FROM</code> clauses for …\nConfigures how this backend handles <code>EXISTS()</code> expressions.\nConfigures how this backend handles the bare <code>DEFAULT</code> …\nConfigures how this backend supports <code>ON CONFLICT</code> clauses\nThe concrete <code>QueryBuilder</code> implementation for this backend.\nThe actual type given to <code>FromSql</code>, with lifetimes applied. …\nConfigures how this backend supports <code>RETURNING</code> clauses\nConfigures how this backend structures <code>SELECT</code> queries\nThis trait provides various options to configure the …\nConfigures how this backend support the <code>GROUP</code> frame unit …\nConfigures how this backend supports frame exclusion …\nAn implementation of <code>TransactionManager</code> which can be used …\nThe backend this type connects to\nAn event that is emitted while starting a new transaction\nA variant of the <code>Connection</code> trait that is usable with …\nAn event that is emitted when a query is cached in the …\nSet cache size for a connection\nAn event that is emitted while committing a transaction\nA connection to a database\nThe cursor type returned by <code>LoadConnection::load</code>\nA helper trait for opaque query representations which …\nDecreases the depth of the transaction (corresponds to …\nThe default loading mode provided by a <code>Connection</code>.\nDisable statement cache\nAn event emitted after establishing a new connection\nAn event that is emitted after executing a query\nError status, probably following a broken connection. The …\nVarious status fields to track the status of a transaction …\nIncrease the depth of the transaction (corresponds to <code>BEGIN</code>…\nA type that provides an connection <code>Instrumentation</code>\nThis enum describes possible connection events that can be …\nThe specific part of a <code>Connection</code> which actually loads …\nAn event that is emitted while rolling back a transaction\nThe row type used as <code>Iterator::Item</code> for the iterator …\nPerform simple operations on a backend.\nAn event emitted by before starting establishing a new …\nAn event that is emitted before executing a query\nRepresents a change to apply to the depth of a transaction\nManages the internal transaction state for a connection.\nStatus of the transaction manager\nData stored as part of the connection implementation to …\nCaches all queries if possible\nValid status, the manager can run operations\nValid transaction status for the manager. Can return the …\nDescribes a connection with an underlying …\nExecute multiple SQL statements within the same string.\nCreates a transaction that will never be committed. This …\nCreates a transaction that will never be committed. This …\nBegin a new transaction or savepoint\nBegin a transaction with custom SQL\nUpdate the transaction depth by adding the value of the …\nCommit the inner-most transaction or savepoint\nIf the transaction fails to commit due to a …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nDowncast the current connection to a specific mutable …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nDowncast the current connection to a specific connection …\nEstablishes a new connection to the database\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an instance of the default <code>Instrumentation</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nCheck if the current connection is a specific connection …\nRetrieves the underlying metadata lookup\nThe function that is invoked for each event\nRollback the inner-most transaction or savepoint\nSet a custom constructor for the default <code>Instrumentation</code> …\nSets the transaction manager status to InError\nSet a specific <code>Instrumentation</code> implementation for this …\nSet the prepared statement cache size to <code>CacheSize</code> for …\nExecutes the given function inside a transaction, but does …\nExecutes the given function inside a transaction, but does …\nExecutes the given function inside of a database …\nExecutes the given function inside of a database …\nExecutes the given function inside of a database …\nExecutes the given function inside of a database …\nReturns the transaction depth if the transaction manager’…\nReturn the current transaction depth\nTransaction level of the newly started transaction\nTransaction level of the to be committed transaction\nTransaction level of the to be rolled back transaction\nAn optional error if the connection failed\nAn optional error if the connection failed\nA opaque representation of the query\nA opaque representation of the query\nSQL string of the cached query\nThe database url the connection tries to connect to\nThe database url the connection tries is connected to\nContains the error value\nThe number of fields that this type will consume.\nDeserialize a single field of a given SQL type.\nDeserialize a database row into a rust data structure\nImplements <code>Queryable</code> for types that correspond to a single …\nA helper trait to deserialize a statically sized row into …\nContains the success value\nTrait indicating that a record can be queried from the …\nImplements <code>Queryable</code> to load the result of statically …\nDeserializes the result of a query constructed with …\nImplements <code>QueryableByName</code> for untyped sql queries, such …\nA specialized result type representing the result of …\nThe Rust type you’d like to map from.\nA marker trait indicating that the corresponding type …\nConstruct an instance of this type\nConstruct an instance of <code>Self</code> from the database row\nSee the trait documentation\nSee the trait documentation.\nA specialized variant of <code>from_sql</code> for handling null values.\nSee the trait documentation.\nThe return type of <code>l + r</code>\nReturn type of <code>AggregateExpressionMethods::aggregate_all</code>\nReturn type of …\nReturn type of <code>AggregateExpressionMethods::aggregate_filter</code>\nReturn type of <code>AggregateExpressionMethods::aggregate_order</code>\nMaps <code>F</code> to <code>Alias&lt;S&gt;</code>\nThe return type of <code>lhs.and(rhs)</code>\nThe type of <code>Item</code> when converted to an expression with the …\nThe type of <code>Item</code> when converted to an expression of <code>Type</code>\nRepresents the return type of <code>.as_select()</code>\nThe return type of <code>expr.asc()</code>\nThe return type of <code>expr.assume_not_null()</code>\nThe return type of <code>lhs.between(lower, upper)</code>\nThe return type of <code>expr.cast&lt;ST&gt;()</code>\nThe return type of <code>lhs.concat(rhs)</code>\nThe return type of <code>expr.desc()</code>\nRepresents the return type of <code>.distinct()</code>\nThe return type of <code>l / r</code>\nThe return type of <code>lhs.eq(rhs)</code>\nThe return type of <code>lhs.eq_any(rhs)</code>\nThe return type of <code>lhs.escape(&#39;x&#39;)</code>\nRepresents the return type of <code>.except(rhs)</code>\nRepresents the return type of <code>.except_all(rhs)</code>\nThe return type of <code>alias.field(field)</code>\nThe return type of <code>alias.fields(fields)</code>\nRepresents the return type of <code>.filter(predicate)</code>\nRepresents the return type of <code>.find(pk)</code>\nRepresents the return type of <code>.filter(lhs.eq(rhs))</code>\nReturn type of <code>FrameBoundDsl::following</code>\nRepresents the return type of <code>.for_key_share()</code>\nRepresents the return type of <code>.for_no_key_update()</code>\nRepresents the return type of <code>.for_share()</code>\nRepresents the return type of <code>.for_update()</code>\nReturn type of <code>FrameClauseDsl::frame_between</code>\nReturn type of <code>FrameClauseDsl::frame_between_with_exclusion</code>\nConstruct a frame clause for window functions from an …\nReturn type of <code>WindowExpressionMethods::frame_by</code>\nConstruct a frame clause for window functions\nReturn type of <code>FrameClauseDsl::frame_start_with</code>\nReturn type of <code>FrameClauseDsl::frame_start_with_exclusion</code>\nRepresents the return type of <code>.group_by(expr)</code>\nThe return type of <code>lhs.gt(rhs)</code>\nThe return type of <code>lhs.ge(rhs)</code>\nRepresents the return type of <code>.having(predicate)</code>\nRepresents the return type of <code>.inner_join(rhs)</code>\nRepresents the return type of <code>.inner_join(rhs.on(on))</code>\nA query source representing the inner join between two …\nRepresents the return type of <code>.intersect(rhs)</code>\nRepresents the return type of <code>.intersect_all(rhs)</code>\nRepresents the return type of <code>.into_boxed::&lt;&#39;a, DB&gt;()</code>\nRepresents the return type of <code>.into_sql()</code>\nThe return type of <code>expr.is_not_null()</code>\nThe return type of <code>expr.is_null()</code>\nRepresents the return type of <code>.left_join(rhs)</code>\nRepresents the return type of <code>.left_join(rhs.on(on))</code>\nA query source representing the left outer join between …\nThe return type of <code>lhs.like(rhs)</code>\nRepresents the return type of <code>.limit()</code>\nThe return type of <code>lhs.lt(rhs)</code>\nThe return type of <code>lhs.le(rhs)</code>\nThe return type of <code>l * r</code>\nThe return type of <code>lhs.ne_all(rhs)</code>\nRepresents the return type of <code>.no_wait()</code>\nThe return type of <code>lhs.not_between(lower, upper)</code>\nThe return type of <code>lhs.ne(rhs)</code>\nThe return type of <code>lhs.not_like(rhs)</code>\nThe return type of <code>expr.nullable()</code>\nRepresents the return type of <code>.nullable()</code>\nRepresents the return type of <code>.offset()</code>\nRepresents the return type of <code>rhs.on(on)</code>\nThe return type of <code>lhs.or(rhs)</code>\nRepresents the return type of <code>.or_filter(predicate)</code>\nRepresents the return type of <code>.order(ordering)</code>\nRepresents the return type of <code>.order_by(ordering)</code>\nThe return type of <code>case_when(...).otherwise(...)</code>\nReturn type of <code>WindowExpressionMethods::over</code>\nReturn type of <code>WindowExpressionMethods::partition_by</code>\nReturn type of <code>FrameBoundDsl::preceding</code>\nRepresents the return type of <code>InsertStatement::returning</code>, …\nRepresents the return type of <code>.select(selection)</code>\nRepresents the return type of <code>UpdateStatement::set()</code>\nRepresents the return type of <code>.single_value()</code>\nRepresents the return type of <code>.skip_locked()</code>\nThe SQL type of an expression\nThe return type of <code>l - r</code>\nRepresents the return type of <code>.then_order_by(ordering)</code>\nRepresents the return type of <code>.union(rhs)</code>\nRepresents the return type of <code>.union_all(rhs)</code>\nRepresents the return type of <code>update(lhs).set(rhs)</code>\nRepresents the return type of …\nThe return type of <code>case_when(...).when(...)</code>\nReturn type of <code>WindowExpressionMethods::window_filter</code>\nReturn type of <code>WindowExpressionMethods::window_order</code>\nAutomatically annotates return type of a query fragment …\nRepresents a SQL <code>AVG</code> function. This function can only take …\nThe return type of <code>avg(expr)</code>\nCreates a SQL <code>CASE WHEN ... END</code> expression\nThe return type of <code>case_when()</code>\nCreates a SQL <code>COUNT</code> expression\nThe return type of <code>count(expr)</code>\nCreates a SQL <code>COUNT(*)</code> expression\nThe return type of <code>count_star()</code>\nCumulative distribution value\nThe return type of <code>cume_dist()</code>\nRepresents the SQL <code>DATE</code> function. The argument should be a …\nThe return type of <code>date(expr)</code>\nCreates a <code>DELETE</code> statement.\nRepresents the return type of <code>diesel::delete</code>\nRank of current row within its partition, without gaps\nThe return type of <code>dense_rank()</code>\nCreates a SQL <code>EXISTS</code> expression.\nThe return type of <code>exists(expr)</code>\nValue of argument from first row of window frame\nThe return type of <code>first_value(expr)</code>\nUse the following frame clause specification\nDifferent frame clause specifications for window functions\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>INSERT</code> statement for the target table.\nRepresents the return type of <code>diesel::insert_into</code>\nCreates an <code>INSERT [OR] IGNORE</code> statement.\nRepresents the return type of <code>diesel::insert_or_ignore_into</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValue of argument from row lagging current row within …\nThe return type of <code>lag(expr)</code>\nValue of argument from row lagging current row within …\nThe return type of <code>lag_with_offset(expr, offset)</code>\nValue of argument from row lagging current row within …\nThe return type of …\nValue of argument from last row of window frame\nThe return type of <code>last_value(expr)</code>\nValue of argument from row leading current row within …\nThe return type of <code>lead(expr)</code>\nValue of argument from row leading current row within …\nThe return type of <code>lead_with_offset(expr, offset)</code>\nValue of argument from row leading current row within …\nThe return type of …\nRepresents a SQL <code>MAX</code> function. This function can only take …\nThe return type of <code>max(expr)</code>\nRepresents a SQL <code>MIN</code> function. This function can only take …\nThe return type of <code>min(expr)</code>\nCreates a SQL <code>NOT</code> expression\nThe return type of <code>not(expr)</code>\nRepresents the SQL <code>CURRENT_TIMESTAMP</code> constant. This is …\nValue of argument from N-th row of window frame\nThe return type of <code>nth_value(expr, n)</code>\nBucket number of current row within its partition\nThe return type of <code>ntile()</code>\nPercentage rank value\nThe return type of <code>percent_rank()</code>\nUse the preceding frame clause specification\nRank of current row within its partition, with gaps\nThe return type of <code>rank()</code>\nCreates a <code>REPLACE</code> statement.\nRepresents the return type of <code>diesel::replace_into</code>\nNumber of th current row within its partition\nThe return type of <code>row_number()</code>\nCreates a bare select statement, with no from clause. …\nRepresents the return type of <code>diesel::select(selection)</code>\nUse literal SQL in the query builder.\nConstruct a full SQL query using raw SQL.\nThe inner subselect\nRepresents a SQL <code>SUM</code> function. This function can only take …\nThe return type of <code>sum(expr)</code>\nRepresents the SQL <code>CURRENT_DATE</code> constant.\nCreates an <code>UPDATE</code> statement.\nRepresents the return type of <code>diesel::update</code>\nA <code>CURRENT ROW</code> frame bound\nExclude the current row from the window frame\nExclude the current peer group from the window frame\nExclude no rows from the frame windows\nExclude any peers, but not the current row from the window …\nGroups frame mode\nRange frame mode\nRows frame mode\nA <code>UNBOUNDED FOLLOWING</code> frame bound\nA <code>UNBOUNDED PRECEDING</code> frame bound\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates that all elements of an expression are valid …\nConverts a type to its representation for use in Diesel’…\nImplements all required variants of <code>AsExpression</code>\nConverts a tuple of values into a tuple of Diesel …\nHelper trait used when boxing expressions.\nA SQL <code>CASE WHEN ... END</code> expression\nMarker trait: this SQL type (<code>Self</code>) can be cast to the …\nRepresents a typed fragment of SQL.\nThe expression being returned\nThe final output expression\nMarker trait: this SQL type (<code>Self</code>) can be cast to the …\nConverts a type to its representation for use in Diesel’…\nIs this expression aggregate?\nWe know what to write as <code>sql_type</code> in the …\nCan two <code>IsAggregate</code> types appear in the same expression?\nTrait alias to represent an expression that isn’t …\nWhat is the resulting <code>IsAggregate</code> type?\nA helper to translate type level sql type information into …\nWhat to write as <code>sql_type</code> in the <code>CAST(expr AS sql_type)</code> …\nThe expression you’d like to select.\nTrait indicating that a record can be selected and queried …\nImplements <code>Selectable</code>\nIndicates that an expression can be selected from a source.\nThis helper trait provides several methods for …\nReturned by the <code>sql()</code> function.\nThe type that this expression represents in SQL\nMarker trait for possible types of <code>Expression::SqlType</code>\nReturned by the <code>SqlLiteral::bind()</code> method when binding a …\nIs this expression valid for a given group by clause?\nImplements <code>ValidGrouping</code>\nPerform the conversion\nPerform the conversion\nAn alias for <code>as_select</code> that can be used with returning …\nAn alias for <code>as_select</code> that can be used with returning …\nConstruct a select clause based on a <code>Selectable</code> …\nConvert <code>&amp;self</code> to an expression for Diesel’s query …\nConvert <code>&amp;self</code> to an expression for Diesel’s query …\nBind a value for use with this SQL query.\nConstruct an instance of the expression\nPossible types for []<code>Expression::SqlType</code>]\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper macros to define custom sql functions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>self</code> to an expression for Diesel’s query builder.\nConvert <code>self</code> to an expression for Diesel’s query builder.\nPossible values for <code>ValidGrouping::IsAggregate</code>\nSets the <code>ELSE</code> branch of the <code>CASE</code> expression\nThe exact return value of this function is considered to …\nUse literal SQL in the query builder\nUse literal SQL in the query builder.\nAdd an additional <code>WHEN ... THEN ...</code> branch to the <code>CASE</code> …\nQuery nodes which cannot be part of a select clause.\nQuery nodes with this expression type do not have a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeclare a sql function for use in your code.\nDeclare a sql function for use in your code.\nA legacy version of <code>define_sql_function!</code>.\nThis expression is never aggregate, and can appear with …\nNo, this expression is not aggregate with the given group …\nYes, this expression is aggregate for the given group by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExpression methods to build aggregate function expressions\nMethods present on boolean expressions\nAdds the <code>escape</code> method to <code>LIKE</code> and <code>NOT LIKE</code>. This is used …\nMethods present on all expressions, except tuples\nConstruct a frame clause for window functions from an …\nConstruct a frame clause for window functions\nA marker trait for possible end frame expressions\nA marker trait for possible frame exclusion expressions\nA marker trait for possible start frame expressions\nMethods present on all expressions\nA following frame clause expression with a fixed offset\nA preceding frame clause expression with a fixed offset\nAllow ~type inference on And and Or helper types\nThe preferred <code>Bool</code> SQL type for this AsExpression …\nMethods present on text expressions\nMethods to construct a window function call\n<code>ALL</code> modifier for aggregate functions\n<code>ALL</code> modifier for aggregate functions\n<code>ALL</code> modifier for aggregate functions\n<code>DISTINCT</code> modifier for aggregate functions\n<code>DISTINCT</code> modifier for aggregate functions\n<code>DISTINCT</code> modifier for aggregate functions\nAdd an aggregate function filter\nAdd an aggregate function filter\nAdd an aggregate function filter\nAdd an aggregate function order\nAdd an aggregate function order\nAdd an aggregate function order\nCreates a SQL <code>AND</code> expression\nCreates a SQL <code>AND</code> expression\nCreates a SQL <code>AND</code> expression\nCreates a SQL <code>ASC</code> expression, representing this expression …\nCreates a SQL <code>ASC</code> expression, representing this expression …\nCreates a SQL <code>ASC</code> expression, representing this expression …\nConverts this potentially nullable expression into one …\nConverts this potentially nullable expression into one …\nConverts this potentially nullable expression into one …\nCreates a SQL <code>BETWEEN</code> expression using the given lower and …\nCreates a SQL <code>BETWEEN</code> expression using the given lower and …\nCreates a SQL <code>BETWEEN</code> expression using the given lower and …\nGenerates a <code>CAST(expr AS sql_type)</code> expression\nGenerates a <code>CAST(expr AS sql_type)</code> expression\nGenerates a <code>CAST(expr AS sql_type)</code> expression\nConcatenates two strings using the <code>||</code> operator.\nConcatenates two strings using the <code>||</code> operator.\nConcatenates two strings using the <code>||</code> operator.\nCreates a SQL <code>DESC</code> expression, representing this …\nCreates a SQL <code>DESC</code> expression, representing this …\nCreates a SQL <code>DESC</code> expression, representing this …\nCreates a SQL <code>=</code> expression.\nCreates a SQL <code>=</code> expression.\nCreates a SQL <code>=</code> expression.\nCreates a SQL <code>IN</code> statement.\nCreates a SQL <code>IN</code> statement.\nCreates a SQL <code>IN</code> statement.\nSee the trait documentation.\nGenerates a <code>CAST(expr AS sql_type)</code> expression, this …\nGenerates a <code>CAST(expr AS sql_type)</code> expression, this …\nGenerates a <code>CAST(expr AS sql_type)</code> expression, this …\nUse the following frame clause specification\nConstruct a between frame clause with a starting and end …\nConstruct a between frame clause with a starting and end …\nConstruct a between frame clause with a starting and end …\nConstruct a between frame clause with a starting and end …\nConstruct a between frame clause with a starting and end …\nConstruct a between frame clause with a starting and end …\nConstruct a between frame clause with a starting and end …\nConstruct a between frame clause with a starting and end …\nAdd a frame clause to the current window function\nAdd a frame clause to the current window function\nAdd a frame clause to the current window function\nConstruct a frame clause with a starting bound\nConstruct a frame clause with a starting bound\nConstruct a frame clause with a starting bound\nConstruct a frame clause with a starting bound\nConstruct a frame clause with a starting bound and an …\nConstruct a frame clause with a starting bound and an …\nConstruct a frame clause with a starting bound and an …\nConstruct a frame clause with a starting bound and an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a SQL <code>&gt;=</code> expression.\nCreates a SQL <code>&gt;=</code> expression.\nCreates a SQL <code>&gt;=</code> expression.\nCreates a SQL <code>&gt;</code> expression.\nCreates a SQL <code>&gt;</code> expression.\nCreates a SQL <code>&gt;</code> expression.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a SQL <code>IS NOT NULL</code> expression.\nCreates a SQL <code>IS NOT NULL</code> expression.\nCreates a SQL <code>IS NOT NULL</code> expression.\nCreates a SQL <code>IS NULL</code> expression.\nCreates a SQL <code>IS NULL</code> expression.\nCreates a SQL <code>IS NULL</code> expression.\nCreates a SQL <code>&lt;=</code> expression.\nCreates a SQL <code>&lt;=</code> expression.\nCreates a SQL <code>&lt;=</code> expression.\nReturns a SQL <code>LIKE</code> expression\nReturns a SQL <code>LIKE</code> expression\nReturns a SQL <code>LIKE</code> expression\nCreates a SQL <code>&lt;</code> expression.\nCreates a SQL <code>&lt;</code> expression.\nCreates a SQL <code>&lt;</code> expression.\nCreates a SQL <code>!=</code> expression.\nCreates a SQL <code>!=</code> expression.\nCreates a SQL <code>!=</code> expression.\nCreates a SQL <code>NOT IN</code> statement.\nCreates a SQL <code>NOT IN</code> statement.\nCreates a SQL <code>NOT IN</code> statement.\nCreates a SQL <code>NOT BETWEEN</code> expression using the given lower …\nCreates a SQL <code>NOT BETWEEN</code> expression using the given lower …\nCreates a SQL <code>NOT BETWEEN</code> expression using the given lower …\nReturns a SQL <code>NOT LIKE</code> expression\nReturns a SQL <code>NOT LIKE</code> expression\nReturns a SQL <code>NOT LIKE</code> expression\nConverts this potentially non-null expression into one …\nConverts this potentially non-null expression into one …\nConverts this potentially non-null expression into one …\nCreates a SQL <code>OR</code> expression\nCreates a SQL <code>OR</code> expression\nCreates a SQL <code>OR</code> expression\nTurn a function call into a window function call\nTurn a function call into a window function call\nTurn a function call into a window function call\nAdd a partition clause to the current window function\nAdd a partition clause to the current window function\nAdd a partition clause to the current window function\nUse the preceding frame clause specification\nAdd a filter to the current window function\nAdd a filter to the current window function\nAdd a filter to the current window function\nAdd a order clause to the current window function\nAdd a order clause to the current window function\nAdd a order clause to the current window function\nThe return type of <code>l + r</code>\nReturn type of <code>AggregateExpressionMethods::aggregate_all</code>\nReturn type of …\nReturn type of <code>AggregateExpressionMethods::aggregate_filter</code>\nReturn type of <code>AggregateExpressionMethods::aggregate_order</code>\nMaps <code>F</code> to <code>Alias&lt;S&gt;</code>\nThe return type of <code>lhs.and(rhs)</code>\nThe type of <code>Item</code> when converted to an expression with the …\nThe type of <code>Item</code> when converted to an expression of <code>Type</code>\nRepresents the return type of <code>.as_select()</code>\nThe return type of <code>expr.asc()</code>\nThe return type of <code>expr.assume_not_null()</code>\nThe return type of <code>lhs.between(lower, upper)</code>\nThe return type of <code>expr.cast&lt;ST&gt;()</code>\nThe return type of <code>lhs.concat(rhs)</code>\nThe return type of <code>expr.desc()</code>\nRepresents the return type of <code>.distinct()</code>\nThe return type of <code>l / r</code>\nThe return type of <code>lhs.eq(rhs)</code>\nThe return type of <code>lhs.eq_any(rhs)</code>\nThe return type of <code>lhs.escape(&#39;x&#39;)</code>\nRepresents the return type of <code>.except(rhs)</code>\nRepresents the return type of <code>.except_all(rhs)</code>\nThe return type of <code>alias.field(field)</code>\nThe return type of <code>alias.fields(fields)</code>\nRepresents the return type of <code>.filter(predicate)</code>\nRepresents the return type of <code>.find(pk)</code>\nRepresents the return type of <code>.filter(lhs.eq(rhs))</code>\nReturn type of <code>FrameBoundDsl::following</code>\nRepresents the return type of <code>.for_key_share()</code>\nRepresents the return type of <code>.for_no_key_update()</code>\nRepresents the return type of <code>.for_share()</code>\nRepresents the return type of <code>.for_update()</code>\nReturn type of <code>FrameClauseDsl::frame_between</code>\nReturn type of <code>FrameClauseDsl::frame_between_with_exclusion</code>\nReturn type of <code>WindowExpressionMethods::frame_by</code>\nReturn type of <code>FrameClauseDsl::frame_start_with</code>\nReturn type of <code>FrameClauseDsl::frame_start_with_exclusion</code>\nRepresents the return type of <code>.group_by(expr)</code>\nThe return type of <code>lhs.gt(rhs)</code>\nThe return type of <code>lhs.ge(rhs)</code>\nRepresents the return type of <code>.having(predicate)</code>\nRepresents the return type of <code>.inner_join(rhs)</code>\nRepresents the return type of <code>.inner_join(rhs.on(on))</code>\nA query source representing the inner join between two …\nRepresents the return type of <code>.intersect(rhs)</code>\nRepresents the return type of <code>.intersect_all(rhs)</code>\nRepresents the return type of <code>.into_boxed::&lt;&#39;a, DB&gt;()</code>\nRepresents the return type of <code>.into_sql()</code>\nThe return type of <code>expr.is_not_null()</code>\nThe return type of <code>expr.is_null()</code>\nRepresents the return type of <code>.left_join(rhs)</code>\nRepresents the return type of <code>.left_join(rhs.on(on))</code>\nA query source representing the left outer join between …\nThe return type of <code>lhs.like(rhs)</code>\nRepresents the return type of <code>.limit()</code>\nThe return type of <code>lhs.lt(rhs)</code>\nThe return type of <code>lhs.le(rhs)</code>\nThe return type of <code>l * r</code>\nThe return type of <code>lhs.ne_all(rhs)</code>\nRepresents the return type of <code>.no_wait()</code>\nThe return type of <code>lhs.not_between(lower, upper)</code>\nThe return type of <code>lhs.ne(rhs)</code>\nThe return type of <code>lhs.not_like(rhs)</code>\nThe return type of <code>expr.nullable()</code>\nRepresents the return type of <code>.nullable()</code>\nRepresents the return type of <code>.offset()</code>\nRepresents the return type of <code>rhs.on(on)</code>\nThe return type of <code>lhs.or(rhs)</code>\nRepresents the return type of <code>.or_filter(predicate)</code>\nRepresents the return type of <code>.order(ordering)</code>\nRepresents the return type of <code>.order_by(ordering)</code>\nThe return type of <code>case_when(...).otherwise(...)</code>\nReturn type of <code>WindowExpressionMethods::over</code>\nReturn type of <code>WindowExpressionMethods::partition_by</code>\nReturn type of <code>FrameBoundDsl::preceding</code>\nRepresents the return type of <code>InsertStatement::returning</code>, …\nRepresents the return type of <code>.select(selection)</code>\nRepresents the return type of <code>UpdateStatement::set()</code>\nRepresents the return type of <code>.single_value()</code>\nRepresents the return type of <code>.skip_locked()</code>\nThe SQL type of an expression\nThe return type of <code>l - r</code>\nRepresents the return type of <code>.then_order_by(ordering)</code>\nRepresents the return type of <code>.union(rhs)</code>\nRepresents the return type of <code>.union_all(rhs)</code>\nRepresents the return type of <code>update(lhs).set(rhs)</code>\nRepresents the return type of …\nThe return type of <code>case_when(...).when(...)</code>\nReturn type of <code>WindowExpressionMethods::window_filter</code>\nReturn type of <code>WindowExpressionMethods::window_order</code>\nThe return type of <code>avg(expr)</code>\nThe return type of <code>case_when()</code>\nRepresents the return type of <code>diesel::delete</code>\nThe return type of <code>exists(expr)</code>\nThe return type of <code>first_value(expr)</code>\nRepresents the return type of <code>diesel::insert_into</code>\nRepresents the return type of <code>diesel::insert_or_ignore_into</code>\nThe return type of <code>lag(expr)</code>\nThe return type of <code>lag_with_offset(expr, offset)</code>\nThe return type of …\nThe return type of <code>last_value(expr)</code>\nThe return type of <code>lead(expr)</code>\nThe return type of <code>lead_with_offset(expr, offset)</code>\nThe return type of …\nThe return type of <code>max(expr)</code>\nThe return type of <code>min(expr)</code>\nThe return type of <code>not(expr)</code>\nThe return type of <code>nth_value(expr, n)</code>\nRepresents the return type of <code>diesel::replace_into</code>\nRepresents the return type of <code>diesel::select(selection)</code>\nThe inner subselect\nThe return type of <code>sum(expr)</code>\nRepresents the return type of <code>diesel::update</code>\nCreate table statement for the <code>__diesel_schema_migrations</code> …\nContains the error value\nRepresents a migration that interacts with diesel\nA trait indicating that a connection could be used to …\nThis trait is designed to customize the behaviour of the …\nRepresents the name of a migration\nA migration source is an entity that can be used to …\nA migration version identifier\nContains the success value\nA specialized result type representing the result of a …\nConvert the current migration version into an owned …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet a the attached metadata for this migration\nGet a list of migrations associated with this migration …\nGet the name of the current migration\nRevert this migration\nApply this migration\nWhether the current migration is executed in a transaction …\nSetup the following table:\nThe version corresponding to the current migration name\nExpression methods to build aggregate function expressions\nThe type returned by <code>all_columns</code>\nIndicates that all elements of an expression are valid …\nTypes which can be passed to <code>update.set</code>.\nImplements <code>AsChangeset</code>\nImplement required traits for the associations API\nThe backend this type connects to\nThe database returned an error.\nBase query type defined by the implementing type\nConstructs a query that finds record(s) based on …\nMethods present on boolean expressions\nHelper trait used when boxing expressions.\nThe update statement this type represents\nA column on a database table. Types which implement this …\nExtension trait to combine queries using a combinator like …\nA connection to a database\nErrors which can occur during <code>Connection::establish</code>\nA specialized result type for establishing connections.\nDiesel could not configure the database connection.\nInterface to add information to conflict targets. Designed …\nThe type returned by <code>default_selection</code>\nContains the error value\nContains the error value\nAdds the <code>escape</code> method to <code>LIKE</code> and <code>NOT LIKE</code>. This is used …\nRepresents a typed fragment of SQL.\nMethods present on all expressions, except tuples\nOutput type of filter_target operation\nConstruct a frame clause for window functions from an …\nConstruct a frame clause for window functions\nA marker trait for possible end frame expressions\nA marker trait for possible frame exclusion expressions\nA marker trait for possible start frame expressions\nThe type returned by <code>from_clause</code>\nThe <code>grouped_by</code> function groups records by their parent.\nTrait indicating that a base query can be constructed for …\nImplements <code>HasQuery</code>\nThe type of this struct’s identifier.\nThis trait indicates that a struct represents a single row …\nImplements <code>Identifiable</code> for references of the current type\nRepresents that a structure can be used to insert a new …\nImplements <code>Insertable</code>\nConverts a type to its representation for use in Diesel’…\nThe connection URL contained a <code>NUL</code> byte.\nThe connection URL could not be parsed.\nSpecify the <code>ON</code> clause for a join statement. This will …\nIndicates that two tables can be joined without an …\nThe name of this column\nMethods present on all expressions\nA following frame clause expression with a fixed offset\nA preceding frame clause expression with a fixed offset\nContains the success value\nContains the success value\nSee the method documentation.\nSee the method documentation.\nThe query returned by <code>belonging_to</code>\nAllow ~type inference on And and Or helper types\nThe preferred <code>Bool</code> SQL type for this AsExpression …\nThe type returned by <code>primary_key</code>\nWhat kind of query does this type represent?\nMethods used to construct select statements.\nA specialized result type for queries.\nRepresents a type which can appear in the <code>FROM</code> clause. …\nTrait indicating that a record can be queried from the …\nImplements <code>Queryable</code> to load the result of statically …\nDeserializes the result of a query constructed with …\nImplements <code>QueryableByName</code> for untyped sql queries, such …\nThe Rust type you’d like to map from.\nMethods used to execute queries.\nSugar for types which implement both <code>AsChangeset</code> and …\nThe expression you’d like to select.\nTrait indicating that a record can be selected and queried …\nImplements <code>Selectable</code>\nIndicates that an expression can be selected from a source.\nThis helper trait provides several methods for …\nThe type that this expression represents in SQL\nA SQL database table. Types which implement this trait …\nThe table which this column belongs to\nThe table which <code>Self::Changeset</code> will be updating\nMethods present on text expressions\nThe <code>VALUES</code> clause to insert these records\nMethods to construct a window function call\nReturns a tuple of all columns belonging to this table.\nAllow two or more columns which are otherwise unrelated to …\nAllow two or more tables which are otherwise unrelated to …\nConvert <code>self</code> into the actual update statement being …\nConstruct a select clause based on a <code>Selectable</code> …\nGet the record(s) belonging to record(s) <code>other</code>\nConstruct an instance of this type\nConstruct an instance of <code>Self</code> from the database row\nConstruct an instance of the expression\nDeclare a sql function for use in your code.\nThe default select clause of this type, which should be …\nDeclare a sql function for use in your code.\nSee the trait documentation.\nEstablishes a new connection to the database\nCombine two queries using a SQL <code>EXCEPT</code>\nCombine two queries using a SQL <code>EXCEPT ALL</code>\nequivalent to filter of FilterDsl but aimed at conflict …\nUse the following frame clause specification\nThe actual <code>FROM</code> clause of this type. This is typically …\nSee the trait documentation.\nReturns the identifier for this record.\nInsert <code>self</code> into a given table.\nCombine two queries using a SQL <code>INTERSECT</code>\nCombine two queries using a SQL <code>INTERSECT ALL</code>\nAllow two tables to be referenced in a join query without …\nConverts a <code>QueryResult&lt;T&gt;</code> into a <code>QueryResult&lt;Option&lt;T&gt;&gt;</code>.\nBy default, Diesel treats an empty update as a …\nUse the preceding frame clause specification\nReturns the primary key of this table.\nConstruct the query associated with this type\nConstruct the query associated with this type\nSet a specific <code>Instrumentation</code> implementation for this …\nSet the prepared statement cache size to <code>CacheSize</code> for …\nA legacy version of <code>define_sql_function!</code>.\nSpecifies that a table exists, and what columns it has. …\nCombine two queries using a SQL <code>UNION</code>\nCombine two queries using a SQL <code>UNION ALL</code>\nConstruct <code>Self::Values</code>\nTypes which can be passed to <code>update.set</code>.\nImplements <code>AsChangeset</code>\nTypes that can be converted into a complete, typed SQL …\nThe primary type used when walking a Diesel AST during …\nA type which manages serializing bind parameters during …\nThe movable bind data of this bind collector\nResulting type\nA <code>DELETE</code> statement with a boxed <code>WHERE</code> clause\nSee <code>SqlQuery::into_boxed</code>.\nAn <code>UPDATE</code> statement with a boxed <code>WHERE</code> clause.\nThe internal buffer type used by this bind collector\nA specialized Result type used with the query builder.\nThe update statement this type represents\nA SQL query variant with already collected bind data which …\nA struct that implements <code>fmt::Display</code> and <code>fmt::Debug</code> to …\nInterface to add information to conflict targets. Designed …\nRepresents a SQL <code>DELETE</code> statement.\nContains the error value\nOutput type of filter_target operation\nCan the SQL generated by <code>Self</code> be uniquely identified by …\nCan the SQL generated by <code>Self</code> be uniquely identified by …\nRepresents the return type of <code>diesel::insert_or_ignore_into</code>\nThe structure returned by <code>insert_into</code>.\nRepresents the return type of <code>diesel::replace_into</code>\nRepresents a complete <code>INSERT OR IGNORE</code> statement.\nA fully constructed insert statement.\nA trait used to construct type erased boxed variant of the …\nA type which can be passed to <code>update</code> or <code>delete</code>.\nA movable version of the bind collector which allows it to …\nContains the success value\nA complete SQL query with a return type.\nWhat kind of query does this type represent?\nConstructs a SQL query from a Diesel AST.\nAn untyped fragment of SQL.\nUniquely identifies queries by their type for the purpose …\nA type which uniquely represents <code>Self</code> in a SQL query.\nImplements <code>QueryId</code>\nRepresents a complete <code>INSERT OR REPLACE</code> statement.\nIndicates that a type is a <code>SELECT</code> statement.\nThe return value of <code>sql_query</code>.\nThe SQL type that this query represents.\nThe SQL type of the <code>SELECT</code> clause\nThe SQL type of <code>Self::Query</code>\nThe table which <code>Self::Changeset</code> will be updating\nRepresents a complete <code>UPDATE</code> statement.\nWhat is the <code>WHERE</code> clause of this target?\nRefill the bind collector with its bind data\nConvert <code>self</code> into the actual update statement being …\nConverts a type which semantically represents a SQL query …\nSee <code>SqlQuery::bind</code>.\nBind a value for use with this SQL query. The given query …\nTypes related to managing bind parameters during query …\nTakes a query <code>QueryFragment</code> expression as an argument and …\nInserts <code>DEFAULT VALUES</code> into the targeted table.\nAdds the given predicate to the <code>WHERE</code> clause of the …\nAdds the given predicate to the <code>WHERE</code> clause of the …\nequivalent to filter of FilterDsl but aimed at conflict …\nReturns the constructed SQL query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the given query node in it’s boxed representation\nBoxes the <code>WHERE</code> clause of this delete statement.\nInternally boxes the query, which allows to  calls <code>bind</code> …\nBoxes the <code>WHERE</code> clause of this update statement.\nSet the column list when inserting from a select statement\nDecomposes <code>self</code> into the table and where clause.\nBuilds a movable version of the bind collector\nBuilds a CollectedQuery with movable bind data\nAdds an <code>ON CONFLICT</code> to the insert statement, if a conflict …\nAdds <code>ON CONFLICT DO NOTHING</code> to the insert statement, …\nAdds to the <code>WHERE</code> clause of a query using <code>OR</code>\nAdd a placeholder for a bind parameter to the end of the …\nPush a value onto the given query to be sent separate from …\nIncreases the internal counter for bind parameters without …\nSerializes the given bind value, and collects the result.\nPush bind data as debug representation\nQuote <code>identifier</code>, and add it to the end of the query being …\nPush the given SQL identifier on the end of the query …\nAdd <code>sql</code> to the end of the query being constructed.\nPush the given SQL string on the end of the query being …\nReturns the type id of <code>Self::QueryId</code> if …\nReturns the type id of <code>Self::QueryId</code> if …\nCall this method whenever you pass an instance of <code>AstPass</code> …\nSpecify what expression is returned after execution of the …\nSpecify what expression is returned after execution of the …\nSpecify what expression is returned after execution of the …\nProvides the <code>SET</code> clause of the <code>UPDATE</code> statement.\nSee <code>SqlQuery::sql</code>.\nAppends a piece of SQL code at the end.\nMark the current query being constructed as unsafe to …\nInserts the given values into the table passed to …\nWalk over this <code>QueryFragment</code> for all passes.\nA type which manages serializing bind parameters during …\nThe movable bind data of this bind collector\nThe internal buffer type used by this bind collector\nA movable version of the bind collector which allows it to …\nA bind collector used by backends which transmit bind …\nRefill the bind collector with its bind data\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuilds a movable version of the bind collector\nConstruct an empty <code>RawBytesBindCollector</code>\nSerializes the given bind value, and collects the result.\nPush bind data as debug representation\nConstructs a query that finds record(s) based on …\nExtension trait to combine queries using a combinator like …\nSpecify the <code>ON</code> clause for a join statement. This will …\nThe query returned by <code>belonging_to</code>\nWhat kind of query does this type represent?\nMethods used to construct select statements.\nMethods used to execute queries.\nSugar for types which implement both <code>AsChangeset</code> and …\nA trait defining how to update a record and fetch the …\nGet the record(s) belonging to record(s) <code>other</code>\nGet the count of a query. This is equivalent to …\nGet the count of a query. This is equivalent to …\nAdds the <code>DISTINCT</code> keyword to a query.\nAdds the <code>DISTINCT</code> keyword to a query.\nCombine two queries using a SQL <code>EXCEPT</code>\nCombine two queries using a SQL <code>EXCEPT ALL</code>\nExecutes the given command, returning the number of rows …\nExecutes the given command, returning the number of rows …\nAdds to the <code>WHERE</code> clause of a query.\nAdds to the <code>WHERE</code> clause of a query.\nAttempts to find a single record from the given table by …\nAttempts to find a single record from the given table by …\nAttempts to load a single record.\nAttempts to load a single record.\nAdds <code>FOR KEY SHARE</code> to the end of the select statement.\nAdds <code>FOR KEY SHARE</code> to the end of the select statement.\nAdds <code>FOR NO KEY UPDATE</code> to the end of the select statement.\nAdds <code>FOR NO KEY UPDATE</code> to the end of the select statement.\nAdds <code>FOR SHARE</code> to the end of the select statement.\nAdds <code>FOR SHARE</code> to the end of the select statement.\nAdds <code>FOR UPDATE</code> to the end of the select statement.\nAdds <code>FOR UPDATE</code> to the end of the select statement.\nRuns the command, and returns the affected row.\nRuns the command, and returns the affected row.\nRuns the command, returning an <code>Vec</code> with the affected rows.\nRuns the command, returning an <code>Vec</code> with the affected rows.\nSets the <code>group by</code> clause of a query.\nSets the <code>group by</code> clause of a query.\nAdds to the <code>HAVING</code> clause of a query.\nAdds to the <code>HAVING</code> clause of a query.\nJoin two tables using a SQL <code>INNER JOIN</code>.\nJoin two tables using a SQL <code>INNER JOIN</code>.\nCombine two queries using a SQL <code>INTERSECT</code>\nCombine two queries using a SQL <code>INTERSECT ALL</code>\nBoxes the pieces of a query into a single type.\nBoxes the pieces of a query into a single type.\nAlias for <code>left_outer_join</code>.\nAlias for <code>left_outer_join</code>.\nJoin two tables using a SQL <code>LEFT OUTER JOIN</code>.\nJoin two tables using a SQL <code>LEFT OUTER JOIN</code>.\nSets the limit clause of the query.\nSets the limit clause of the query.\nExecutes the given query, returning a <code>Vec</code> with the …\nExecutes the given query, returning a <code>Vec</code> with the …\nExecutes the given query, returning an <code>Iterator</code> with the …\nExecutes the given query, returning an <code>Iterator</code> with the …\nThe traits used by <code>QueryDsl</code>.\nAdds <code>NOWAIT</code> to the end of a <code>FOR UPDATE</code> clause.\nAdds <code>NOWAIT</code> to the end of a <code>FOR UPDATE</code> clause.\nCoerce the SQL type of the select clause to it’s …\nCoerce the SQL type of the select clause to it’s …\nSets the offset clause of the query.\nSets the offset clause of the query.\nSee the trait documentation.\nSee the trait documentation.\nSee the trait documentation.\nAdds to the <code>WHERE</code> clause of a query using <code>OR</code>\nAdds to the <code>WHERE</code> clause of a query using <code>OR</code>\nSets the order clause of a query.\nSets the order clause of a query.\nAlias for <code>order</code>\nAlias for <code>order</code>\nSee the trait documentation.\nSee the trait documentation.\nSee the trait documentation.\nAdds a <code>SELECT</code> clause to the query.\nAdds a <code>SELECT</code> clause to the query.\nWraps this select statement in parenthesis, allowing it to …\nWraps this select statement in parenthesis, allowing it to …\nAdds <code>SKIP LOCKED</code> to the end of a <code>FOR UPDATE</code> clause.\nAdds <code>SKIP LOCKED</code> to the end of a <code>FOR UPDATE</code> clause.\nAppends to the <code>ORDER BY</code> clause of this SQL query.\nAppends to the <code>ORDER BY</code> clause of this SQL query.\nCombine two queries using a SQL <code>UNION</code>\nCombine two queries using a SQL <code>UNION ALL</code>\nSee the traits documentation.\nThe <code>into_boxed</code> method\nThe <code>distinct</code> method\nThe <code>execute</code> method\nThe <code>filter</code> method\nThe <code>find</code> method\nThe <code>group_by</code> method\nThe <code>having</code> method\nThe <code>limit</code> method\nThe <code>load</code> method\nMethods related to locking select statements\nMethods related to modifiers on locking select statements\nThe <code>offset</code> method\nThe <code>or_filter</code> method\nThe <code>order</code> method\nThe type returned by <code>.filter</code>.\nThe type returned by <code>.find</code>.\nThe type returned by <code>.filter</code>.\nThe type returned by <code>.group_by</code>\nThe type returned by <code>.limit</code>\nThe type returned by <code>modify_lock</code>. See <code>dsl::SkipLocked</code> and …\nThe return type of <code>nullable</code>\nThe type returned by <code>.offset</code>.\nThe type returned by <code>.order</code>.\nThe type returned by <code>.then_order_by</code>.\nThe type returned by <code>.select</code>\nThe type returned by <code>.single_value</code>.\nThe return type of <code>internal_into_boxed</code>\nThe type returned by <code>.distinct</code>\nThe type returned by <code>.having</code>.\nThe type returned by <code>set_lock</code>. See <code>dsl::ForUpdate</code> and …\nReturn type of <code>LoadQuery::internal_load</code>\nThe <code>select</code> method\nThe <code>nullable</code> method\nThe <code>single_value</code> method\nThe <code>then_order_by</code> method\nSee the trait documentation.\nExecute this command\nSee the trait documentation.\nSee the trait documentation.\nSee the trait documentation.\nSee the trait documentation.\nSee the trait documentation.\nSee the trait documentation\nSee the trait level documentation\nSee the trait documentation\nSee the trait documentation\nSee the trait documentation.\nSee the trait documentation.\nSee the trait documentation\nSee the trait documentation.\nSee the trait documentation.\nSee the trait level documentation\nRepresents an alias within diesel’s query builder\nTypes created by the <code>alias!</code> macro that serve to …\nRepresents an aliased field (column) within diesel’s …\nThe type returned by <code>all_columns</code>\nDetermines how many times <code>Self</code> appears in <code>QS</code>\nA column on a database table. Types which implement this …\nHow many times does <code>Self</code> appear in <code>QS</code>?\nThe type returned by <code>default_selection</code>\nThe type returned by <code>from_clause</code>\nIndicates that two tables can be joined without an …\nMax length of that column\nA table appears in the from clause two or more times.\nThe name of this alias in the query\nThe name of this column\nA table never appears in the from clause.\nA table appears in the from clause exactly one time.\nThe result of adding these numbers together\nAdd two peano numbers together.\nThe type returned by <code>primary_key</code>\nRepresents a type which can appear in the <code>FROM</code> clause. …\nMax length for columns of type Char/Varchar…\nA SQL database table. Types which implement this trait …\nThe table which this column belongs to\nAllows Diesel to implement some internal traits for two …\nThe table the alias maps to\nReturns a tuple of all columns belonging to this table.\nThe default select clause of this type, which should be …\nMaps a single field of the source table in this alias\nMaps multiple fields of the source table in this alias …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe actual <code>FROM</code> clause of this type. This is typically …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the primary key of this table.\nObtain the table from the source\nA builder for a connection pool.\nThe connection type this manager deals with.\nAn error occurred establishing the connection\nAn r2d2 connection manager for use with Diesel.\nA trait which allows for customization of connections.\nThe error used when managing connections with <code>r2d2</code>.\nThe error type returned by <code>Connection</code>s.\nA “type map” used to associate data with pooled …\nA trait which handles errors reported by the …\nA trait which is provided with information about events in …\nA <code>HandleError</code> implementation which logs at the error level.\nA trait which provides connection-specific functionality.\nA <code>CustomizeConnection</code> which does nothing.\nA <code>HandleError</code> implementation which does nothing.\nA <code>HandleEvent</code> implementation which does nothing.\nA generic connection pool.\nA re-export of <code>r2d2::Error</code>, which is only used by methods …\nA smart pointer wrapping a connection.\nAn error occurred pinging the database\nA trait indicating a connection could be used inside a …\nInformation about the state of a <code>Pool</code>.\nA connection customizer designed for use in tests. …\nConsumes the builder, returning a new, initialized pool.\nConsumes the builder, returning a new pool.\nReturns a builder type to configure a new pool.\nRemoves all values from the map.\nAttempts to create a new connection.\nSets the connection customizer used by the pool.\nSets the connection timeout used by the pool.\nReturns the configured connection timeout.\nThe number of connections currently being managed by the …\nSets the handler for errors reported in the pool.\nEvent subscriptions.\nSets the handler for events reported by the pool.\nReturns a shared reference to the extensions associated …\nReturns a mutable reference to the extensions associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a connection from the pool.\nReturns a shared reference to the stored value of the …\nReturns a mutable reference to the stored value of the …\nRetrieves a connection from the pool, waiting for at most …\nCalled when a new connection is acquired.\nCalled when a connection is checked back into the pool.\nCalled when a connection is checked out from the pool.\nHandles an error.\nCalled when a connection is released.\nCalled when a checkout attempt times out.\n<em>Quickly</em> determines if the connection is no longer usable.\nThe number of idle connections.\nSets the idle timeout used by the pool.\nReturns the configured idle connection timeout.\nInserts a new value into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the connection is broken and should not be reused\nDetermines if the connection is still connected to the …\nSets the maximum lifetime of connections in the pool.\nReturns the configured maximum connection lifetime.\nSets the maximum number of connections managed by the pool.\nReturns the configured maximum pool size.\nSets the minimum idle connection count maintained by the …\nReturns the configured mimimum idle connection count.\nConstructs a new <code>Builder</code>.\nCreates a new connection pool with a default configuration.\nReturns a new, empty <code>Extensions</code>.\nReturns a new connection manager, which establishes …\nCalled with connections immediately after they are …\nCalled with connections when they are removed from the …\nCheck if a connection is still valid\nRemoves the value of the specified type from the map, …\nReturns information about the current state of the pool.\nIf true, the health of a connection will be verified via a …\nReturns if the pool is configured to test connections on …\nSets the thread pool used for asynchronous operations such …\nAttempts to retrieve a connection from the pool if there …\nModifies the URL which was supplied at initialization.\nInformation about an acquire event.\nInformation about a checkin event.\nInformation about a checkout event.\nA trait which is provided with information about events in …\nA <code>HandleEvent</code> implementation which does nothing.\nInformation about a release event.\nInformation about a timeout event.\nReturns the age of the connection.\nReturns the ID of the connection.\nReturns the ID of the connection.\nReturns the ID of the connection.\nReturns the ID of the connection.\nReturns the time taken to check out the connection.\nReturns the amount of time the connection was checked out.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalled when a new connection is acquired.\nCalled when a connection is checked back into the pool.\nCalled when a connection is checked out from the pool.\nCalled when a connection is released.\nCalled when a checkout attempt times out.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the timeout of the failed checkout attempt.\nAttempted to perform an operation that cannot be done …\nThe database returned an error.\nTransaction manager broken, likely due to a broken …\nA check constraint was violated.\nThe connection to the server was unexpectedly closed.\nErrors which can occur during <code>Connection::establish</code>\nA specialized result type for establishing connections.\nDiesel could not configure the database connection.\nThe database returned an error.\nInformation about an error that was returned by the …\nThe kind of database error that occurred.\nAn error occurred deserializing the data being sent to the …\nAn error occurred while deserializing a field\nExpected when an update has no changes to save.\nExpected when you try to execute an empty query\nContains the error value\nContains the error value\nRepresents all the ways that a query can fail.\nAn exclusion constraint was violated.\nA foreign key constraint was violated.\nThe query contained a nul byte.\nThe connection URL contained a <code>NUL</code> byte.\nThe connection URL could not be parsed.\nNo rows were returned by a query expected to return at …\nAttempted to perform an operation that can only be done …\nA not null constraint was violated.\nContains the success value\nContains the success value\nSee the method documentation.\nSee the method documentation.\nThe query could not be constructed\nA specialized result type for queries.\nThe command could not be completed because the transaction …\nA restrict constraint was violated.\nAn error occurred when attempting rollback of a …\nRoll back the current transaction.\nAn error occurred serializing the data being sent to the …\nA serializable transaction failed to commit due to a …\nThe query could not be sent to the database due to a …\nExpected more fields then present in the current row while …\nAn unexpected <code>NULL</code> was encountered during deserialization\nA unique constraint was violated.\nThe name of the column the error was associated with, if …\nThe constraint that was violated if this error is a …\nAn optional secondary error message providing more details …\nThe error that occurred while deserializing the field\nThe name of the field that failed to deserialize\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn optional suggestion of what to do about the problem, if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe primary human-readable error message. Typically one …\nConverts a <code>QueryResult&lt;T&gt;</code> into a <code>QueryResult&lt;Option&lt;T&gt;&gt;</code>.\nBy default, Diesel treats an empty update as a …\nAn optional integer indicating an error cursor position as …\nThe name of the table the error was associated with, if …\nThe error that was encountered during the failed commit …\nThe error that was encountered when attempting the rollback\nA store for cached information between rows for faster …\nRepresents a single field in a database row.\nField type returned by a <code>Row</code> implementation\nA row that can be turned into an owned version\nRepresents a row of a SQL query, where the values are …\nThe owned version of the row\nRepresents a single database row.\nRepresenting a way to index into database rows\nGet the number of fields in the current row\nThe name of the current field\nGet the field with the provided index from the row.\nRetrieve and deserialize a single value from the query\nGet a deserialized value with the provided index from the …\nGet the numeric index inside the current row for the …\nTurn the row into its owned version\nChecks whether this field is null or not.\nGet the value representing the current field in the raw …\nContains the error value\nTiny enum to make the return type of <code>ToSql</code> more descriptive\nThe value is not null\nContains the success value\nWraps a buffer to be written by <code>ToSql</code> with additional …\nA specialized result type representing the result of …\nSerializes a single value to be sent to the database.\nNo data was written, as this type is null\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the current <code>Output</code> structure to access the inner …\nReturns the backend’s mechanism for dynamically looking …\nConstruct a new <code>Output</code>\nCall this method whenever you pass an instance of …\nSet the inner buffer to a specific value\nSee the trait documentation.\nAre both values of <code>IsNull</code> are nullable?\nThe SQL type of <code>avg(this_type)</code>\nThe big integer SQL type.\nThe binary SQL type.\nThe boolean SQL type.\nA marker trait for accepting expressions of the type <code>Bool</code> …\nThe date SQL type.\nAlias for <code>Numeric</code>\nImplement numeric operators for the current query node\nThe double precision float SQL type.\nThe float SQL type.\nRepresents SQL types which can be used with <code>SUM</code> and <code>AVG</code>\nIndicates that a SQL type exists for a backend.\nThe integer SQL type.\nThe interval SQL type.\nConverts a type which may or may not be nullable into its …\nConverts a type which may or may not be nullable into its …\nIs this type nullable?\nThe JSON SQL type.  This type can only be used with …\nThe <code>jsonb</code> SQL type.  This type can only be used with …\nA type level constructor for maybe nullable types\nThe type used for runtime lookup of metadata.\nThe not nullable representation of this type.\nThe nullable SQL type.\nThe nullable representation of this type.\nThe arbitrary precision numeric SQL type.\nIs one value of <code>IsNull</code> nullable?\nSee the trait documentation\nSee the trait documentation\nSee the trait documentation\nA marker trait indicating that a SQL type represents a …\nThe small integer SQL type.\nMarker trait for types which can be used with <code>MAX</code> and <code>MIN</code>\nA marker trait for SQL types\nImplement necessary traits for adding a new sql type\nThe SQL type of <code>sum(this_type)</code>\nThe text SQL type.\nThe time SQL type.\nThe timestamp SQL type.\nThe tiny integer SQL type.\nInformation about how a backend stores metadata about …\nThe actual type used to represent metadata.\nQuery nodes with this expression type do not have a …\nThe SQL <code>VARCHAR</code> type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPossible values for <code>SqlType::IsNullable</code>\nFetch the metadata for the given type\nRepresents the output of numeric operators in SQL\nRepresents the output type of <code>AllAreNullable</code> for two given …\nYes, this type can be null\nRepresents the output type of <code>OneIsNullable</code> for two given …\nRepresents if the SQL type is nullable or not\nRepresents the output type of <code>MaybeNullableType</code>\nNo, this type cannot be null as it is marked as <code>NOT NULL</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents SQL types which can be added.\nRepresents SQL types which can be divided.\nRepresents SQL types which can be multiplied.\nThe SQL type of the result of adding <code>Rhs</code> to <code>Self</code>\nThe SQL type of the result of subtracting <code>Rhs</code> from <code>Self</code>\nThe SQL type of the result of multiplying <code>Self</code> by <code>Rhs</code>\nThe SQL type of the result of dividing <code>Self</code> by <code>Rhs</code>\nThe SQL type which can be added to this one\nThe SQL type which can be subtracted from this one\nThe SQL type which this can be multiplied by\nThe SQL type which this one can be divided by\nRepresents SQL types which can be subtracted.\nInterface to add information to conflict targets. Designed …\nOutput type of filter_target operation\nA partially constructed <code>ON CONFLICT DO UPDATE</code> clause.\nA partially constructed <code>ON CONFLICT</code> clause.\nCreates a query with <code>ON CONFLICT (target) DO NOTHING</code>\nUsed to create a query in the form …\nRepresents <code>excluded.column</code> in an <code>ON CONFLICT DO UPDATE</code> …\nequivalent to filter of FilterDsl but aimed at conflict …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>do_update</code> for usage examples.")