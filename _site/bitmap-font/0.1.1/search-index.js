var searchIndex = JSON.parse('{\
"bitmap_font":{"doc":"<strong>bitmap-font 0.1 works with embedded-graphics 0.6!</strong> Version …","t":[3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,8,11,11,11,11,11,11,11,11,11,11,11,11,10],"n":["BitmapFont","FONT_10x18","FONT_10x18_BOLD","FONT_10x20","FONT_10x20_BOLD","FONT_12x24","FONT_12x24_BOLD","FONT_14x26","FONT_14x26_BOLD","FONT_14x28","FONT_14x28_BOLD","FONT_16x30","FONT_16x30_BOLD","FONT_16x32","FONT_16x32_BOLD","FONT_20x40","FONT_20x40_BOLD","FONT_5x9","FONT_5x9_BOLD","FONT_6x12","FONT_6x12_BOLD","FONT_7x13","FONT_7x13_BOLD","FONT_7x14","FONT_7x14_BOLD","FONT_8x15","FONT_8x15_BOLD","FONT_8x16","FONT_8x16_BOLD","WithFont","borrow","borrow_mut","clone","from","height","into","pixel","pixel_double","try_from","try_into","type_id","width","with_font"],"q":["bitmap_font","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Stores the font bitmap and some additional info for each …","Pixel-double version of <code>FONT_5x9</code>.","Pixel-double version of <code>FONT_5x9_BOLD</code>.","Tamzen 10x20 Font.","Tamzen 10x20 Bold Font.","Pixel-double version of <code>FONT_6x12</code>.","Pixel-double version of <code>FONT_6x12_BOLD</code>.","Pixel-double version of <code>FONT_7x13</code>.","Pixel-double version of <code>FONT_7x13_BOLD</code>.","Pixel-double version of <code>FONT_7x14</code>.","Pixel-double version of <code>FONT_7x14_BOLD</code>.","Pixel-double version of <code>FONT_8x15</code>.","Pixel-double version of <code>FONT_8x15_BOLD</code>.","Pixel-double version of <code>FONT_8x16</code>.","Pixel-double version of <code>FONT_8x16_BOLD</code>.","Pixel-double version of <code>FONT_10x20</code>.","Pixel-double version of <code>FONT_10x20_BOLD</code>.","Tamzen 5x9 Font.","Tamzen 5x9 Bold Font.","Tamzen 6x12 Font.","Tamzen 6x12 Bold Font.","Tamzen 7x13 Font.","Tamzen 7x13 Bold Font.","Tamzen 7x14 Font.","Tamzen 7x14 Bold Font.","Tamzen 8x15 Font.","Tamzen 8x15 Bold Font.","Tamzen 8x16 Font.","Tamzen 8x16 Bold Font.","Style a Text with a font and color.","","","","Returns the argument unchanged.","Return the height of each character.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the pixel <code>(x, y)</code> is turned on in the …","Returns a pixel-double version of this font.","","","","Return the width of each character.","Style this text with a font and color."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bitmapfont",3]],[[]],[[],["u32",0]],[[]],[[["char",0],["u32",0],["u32",0]],["bool",0]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["u32",0]],[[["bitmapfont",3],["binarycolor",4]],["styled",3]]],"p":[[3,"BitmapFont"],[8,"WithFont"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":[6,4,8,6,4,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11],"n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32_into","write_f64","write_f64_into","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_i8_into","write_int","write_int128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128"],"q":["byteorder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,1,2,3,1,2,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2],"f":[null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bigendian",4]],[[["",0]],["littleendian",4]],[[["",0],["bigendian",4]],["ordering",4]],[[["",0],["littleendian",4]],["ordering",4]],[[],["bigendian",4]],[[],["littleendian",4]],[[["",0],["bigendian",4]],["bool",0]],[[["",0],["littleendian",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["",0],["bigendian",4]],["option",4,[["ordering",4]]]],[[["",0],["littleendian",4]],["option",4,[["ordering",4]]]],[[],["f32",0]],[[]],[[]],[[],["f64",0]],[[]],[[]],[[],["i128",0]],[[]],[[],["i16",0]],[[]],[[],["i32",0]],[[],["i32",0]],[[]],[[],["i64",0]],[[],["i64",0]],[[]],[[["usize",0]],["i64",0]],[[["usize",0]],["i128",0]],[[],["u128",0]],[[],["u128",0]],[[],["u128",0]],[[]],[[]],[[]],[[],["u16",0]],[[],["u16",0]],[[],["u16",0]],[[]],[[]],[[]],[[],["u32",0]],[[],["u32",0]],[[],["u32",0]],[[],["u32",0]],[[]],[[]],[[]],[[],["u64",0]],[[],["u64",0]],[[],["u64",0]],[[],["u64",0]],[[]],[[]],[[]],[[["usize",0]],["u64",0]],[[["usize",0]],["u64",0]],[[["usize",0]],["u64",0]],[[["usize",0]],["u128",0]],[[["usize",0]],["u128",0]],[[["usize",0]],["u128",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["f32",0]]],[[]],[[["f64",0]]],[[]],[[["i128",0]]],[[]],[[["i16",0]]],[[]],[[["i32",0]]],[[["i32",0]]],[[]],[[["i64",0]]],[[["i64",0]]],[[]],[[]],[[["i64",0],["usize",0]]],[[["i128",0],["usize",0]]],[[["u128",0]]],[[["u128",0]]],[[["u128",0]]],[[]],[[]],[[]],[[["u16",0]]],[[["u16",0]]],[[["u16",0]]],[[]],[[]],[[]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[]],[[]],[[]],[[["u64",0]]],[[["u64",0]]],[[["u64",0]]],[[["u64",0]]],[[]],[[]],[[]],[[["u64",0],["usize",0]]],[[["u64",0],["usize",0]]],[[["u64",0],["usize",0]]],[[["u128",0],["usize",0]]],[[["u128",0],["usize",0]]],[[["u128",0],["usize",0]]]],"p":[[4,"BigEndian"],[4,"LittleEndian"],[8,"ByteOrder"]]},\
"embedded_graphics":{"doc":"This crate aims to make drawing 2D graphics primitives …","t":[8,16,10,0,14,14,14,14,14,0,0,0,0,0,0,14,0,10,0,14,0,12,12,8,3,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,8,3,3,3,3,3,3,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,12,12,11,11,3,8,3,3,6,6,8,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,8,3,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,3,3,3,4,18,18,18,18,18,18,3,3,3,8,8,18,18,18,18,18,18,18,18,18,18,18,18,13,13,8,18,18,18,16,3,3,3,8,16,18,18,18,18,18,18,18,18,18,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,4,8,4,8,3,3,3,3,3,3,3,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,8,3,8,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,12,10,10,10,12,12,12,8,0,11,0,0,0,3,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10],"n":["DrawTarget","Error","draw_pixel","drawable","egcircle","egline","egrectangle","egtext","egtriangle","fonts","geometry","image","mock_display","pixelcolor","prelude","primitive_style","primitives","size","style","text_style","transform","0","1","Drawable","Pixel","borrow","borrow_mut","clone","cmp","default","draw","draw","eq","fmt","from","hash","into","ne","partial_cmp","try_from","try_into","type_id","CHARACTER_SIZE","CHARACTER_SPACING","FONT_IMAGE","FONT_IMAGE_WIDTH","Font","Font12x16","Font24x32","Font6x12","Font6x6","Font6x8","Font8x16","StyledTextIterator","Text","VARIABLE_WIDTH","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char_offset","char_offset","char_offset","char_offset","char_offset","char_offset","char_offset","char_width","character_pixel","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into_iter","into_styled","ne","ne","new","next","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","position","text","translate","translate_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Dimensions","Point","Size","abs","add","add","add","add_assign","add_assign","add_assign","borrow","borrow","borrow_mut","borrow_mut","bottom_right","clone","clone","cmp","cmp","default","default","div","div","div_assign","div_assign","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","height","index","index","into","into","mul","mul","mul_assign","mul_assign","ne","ne","neg","new","new","partial_cmp","partial_cmp","size","sub","sub","sub","sub_assign","sub_assign","sub_assign","top_left","try_from","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","width","x","y","zero","zero","Image","ImageDimensions","ImageIterator","ImageRaw","ImageRawBE","ImageRawLE","IntoPixelIter","PixelIterator","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bottom_right","clone","clone","cmp","eq","fmt","fmt","fmt","from","from","from","hash","height","height","into","into","into","into_iter","ne","new","new","next","partial_cmp","pixel_iter","size","top_left","translate","translate_mut","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","width","width","ColorMapping","MockDisplay","borrow","borrow_mut","char_to_color","clone","color_to_char","default","draw_pixel","eq","fmt","from","from_pattern","get_pixel","height","into","new","set_pixel","size","try_from","try_into","type_id","width","BLACK","BLACK","BLACK","BLACK","BLACK","BLACK","BLUE","BLUE","BLUE","Bgr555","Bgr565","Bgr888","BinaryColor","CYAN","CYAN","CYAN","GREEN","GREEN","GREEN","Gray2","Gray4","Gray8","GrayColor","IntoStorage","MAGENTA","MAGENTA","MAGENTA","MAX_B","MAX_B","MAX_B","MAX_G","MAX_G","MAX_G","MAX_R","MAX_R","MAX_R","Off","On","PixelColor","RED","RED","RED","Raw","Rgb555","Rgb565","Rgb888","RgbColor","Storage","WHITE","WHITE","WHITE","WHITE","WHITE","WHITE","YELLOW","YELLOW","YELLOW","b","b","b","b","b","b","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char_to_color","char_to_color","char_to_color","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","color_to_char","color_to_char","color_to_char","default","default","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","g","g","g","g","g","g","g","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into_storage","invert","is_off","is_on","luma","luma","luma","luma","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","r","r","r","r","r","r","raw","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","BITS_PER_PIXEL","BigEndian","ByteOrder","LittleEndian","RawData","RawU1","RawU16","RawU2","RawU24","RawU32","RawU4","RawU8","Storage","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","DrawTarget","Error","GrayColor","Point","RgbColor","Size","b","clear","clear","clear","draw_circle","draw_circle","draw_circle","draw_image","draw_image","draw_image","draw_iter","draw_iter","draw_iter","draw_line","draw_line","draw_line","draw_pixel","draw_rectangle","draw_rectangle","draw_rectangle","draw_triangle","draw_triangle","draw_triangle","g","height","luma","r","size","width","x","y","Primitive","circle","into_styled","line","rectangle","triangle","Circle","StyledCircleIterator","borrow","borrow","borrow_mut","borrow_mut","bottom_right","center","clone","clone","cmp","cmp","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","into_iter","ne","ne","new","next","partial_cmp","partial_cmp","radius","size","top_left","translate","translate_mut","try_from","try_from","try_into","try_into","type_id","type_id","Line","StyledLineIterator","borrow","borrow","borrow_mut","borrow_mut","bottom_right","clone","clone","cmp","cmp","default","end","eq","eq","fmt","fmt","from","from","hash","hash","into","into","into_iter","ne","ne","new","next","partial_cmp","partial_cmp","size","start","top_left","translate","translate_mut","try_from","try_from","try_into","try_into","type_id","type_id","Rectangle","StyledRectangleIterator","borrow","borrow","borrow_mut","borrow_mut","bottom_right","bottom_right","clone","clone","cmp","cmp","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","into_iter","ne","ne","new","next","partial_cmp","partial_cmp","size","top_left","top_left","translate","translate_mut","try_from","try_from","try_into","try_into","type_id","type_id","StyledTriangleIterator","Triangle","borrow","borrow","borrow_mut","borrow_mut","bottom_right","clone","clone","cmp","cmp","default","eq","eq","fmt","fmt","from","from","from_points","hash","hash","into","into","into_iter","ne","ne","new","next","p1","p2","p3","partial_cmp","partial_cmp","size","top_left","translate","translate_mut","try_from","try_from","try_into","try_into","type_id","type_id","PrimitiveStyle","PrimitiveStyleBuilder","Styled","TextStyle","TextStyleBuilder","background_color","background_color","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom_right","bottom_right","build","build","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","eq","eq","eq","eq","eq","fill_color","fill_color","fmt","fmt","fmt","fmt","fmt","font","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","ne","ne","ne","ne","ne","new","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","primitive","size","size","stroke_color","stroke_color","stroke_width","stroke_width","style","text_color","text_color","top_left","top_left","translate","translate_mut","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_fill","with_stroke","Transform","translate","translate_mut"],"q":["embedded_graphics","","","","","","","","","","","","","","","","","","","","","embedded_graphics::drawable","","","","","","","","","","","","","","","","","","","","","embedded_graphics::fonts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mock_display","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::pixelcolorembedded_graphics::pixelcolor::rawembedded_graphics::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::primitives","","","","","","embedded_graphics::primitives::circle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::primitives::line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::primitives::rectangle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::primitives::triangle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::style","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::transform","",""],"d":["Defines a display that can be used to render <code>Drawable</code> …","Error type to return when a drawing operation fails.","Draws a pixel on the display.","<code>Drawable</code> trait and helpers","Create a <code>Circle</code> with optional styling using a convenient …","Create a <code>Line</code> with optional styling using a convenient …","Create a <code>Rectangle</code> with optional styling using a …","Creates a styled text.","Create a <code>Triangle</code> with optional styling using a convenient …","Monospaced bitmap fonts.","Geometry module.","Image support for embedded-graphics","Mock display for use in tests.","Pixel color types.","Prelude","Create a <code>PrimitiveStyle</code>","Graphics primitives","Returns the dimensions of the <code>DrawTarget</code> in pixels.","Styling struct to customize the look of objects.","Create a <code>TextStyle</code>","Transformations for graphics objects","","","Marks an object as “drawable”. Must be implemented for …","A single pixel.","","","","","","Draw the graphics object using the supplied DrawTarget.","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Size of a single character in pixel.","Spacing between characters.","Raw image data containing the font.","The width of the raw image data.","Monospaced bitmap font.","12x16 pixel monospace font.","24x32 pixel monospace font.","6x12 pixel monospace font.","6x6 pixel variable width font.","6x8 pixel monospace font.","8x16 pixel monospace font.","Pixel iterator for styled text.","A text object.","Whether characters have a variable width or not.","","","","","","","","","","","","","","","","","Returns the position a character in the font.","","","","","","","Returns the actual width of a character in the font.","Returns the value of a pixel in a character in the font.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Attaches a text style to the text object.","","","Creates a text.","","","","","","","","","","The position.","The string.","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the ability to get the dimensions/position of a …","2D point.","2D size.","Remove the sign from a coordinate","","Offsets a point by adding a size.","","Offsets a point by adding a size.","","","","","","","Get the bottom right corner of the bounding box for an …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","The height.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Creates a point from  X and Y coordinates.","Creates a size from a width and a height.","","","Get the width and height for an object","","Offsets a point by subtracting a size.","","Offsets a point by subtracting a size.","","","Get the top left corner of the bounding box for an object","","","","","","","","","","The width.","The x coordinate.","The y coordinate.","Creates a point with X and Y equal to zero.","Creates a size with width and height equal to zero.","Image drawable.","A trait to get the dimensions of an image.","Pixel iterator over <code>Image</code> objects","An image constructed from a slice of raw pixel data.","Image with big endian data.","Image with little endian data.","Conversion into an iterator over the pixels of the image.","Iterator over pixels in the image","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Get the height in pixels of an image","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new image.","Create a new <code>Image</code> with the given image pixel data.","","","Get an iterator over the pixels of the image","","","Translate the image by a given delta, returning a new image","Translate the image by a given delta, modifying the …","","","","","","","","","","Get the width in pixels of an image","","Mapping between <code>char</code>s and colors.","Mock display struct","","","Converts a char into a color of type <code>C</code>.","","Converts a color of type <code>C</code> into a char.","","","","","Returns the argument unchanged.","Creates a new mock display from a character pattern.","Returns the color of a pixel.","Returns the height of the display.","Calls <code>U::from(self)</code>.","Creates a new empty mock display.","Changes the color of a pixel.","","","","","Returns the width of the display.","Black color (0% luma)","Black color (0% luma)","Black color (0% luma)","Black color (R: 0%, G: 0%, B: 0%)","Black color (R: 0%, G: 0%, B: 0%)","Black color (R: 0%, G: 0%, B: 0%)","Blue color (R: 0%, G: 0%, B: 100%)","Blue color (R: 0%, G: 0%, B: 100%)","Blue color (R: 0%, G: 0%, B: 100%)","Bgr555 color.","Bgr565 color.","Bgr888 color.","Binary color.","Cyan color (R: 0%, G: 100%, B: 100%)","Cyan color (R: 0%, G: 100%, B: 100%)","Cyan color (R: 0%, G: 100%, B: 100%)","Green color (R: 0%, G: 100%, B: 0%)","Green color (R: 0%, G: 100%, B: 0%)","Green color (R: 0%, G: 100%, B: 0%)","2 bit grayscale color.","4 bit grayscale color.","8 bit grayscale color.","Grayscale color.","Convert a <code>PixelColor</code> into its underlying storage type","Magenta color (R: 100%, G: 0%, B: 100%)","Magenta color (R: 100%, G: 0%, B: 100%)","Magenta color (R: 100%, G: 0%, B: 100%)","The maximum value in the blue channel.","The maximum value in the blue channel.","The maximum value in the blue channel.","The maximum value in the green channel.","The maximum value in the green channel.","The maximum value in the green channel.","The maximum value in the red channel.","The maximum value in the red channel.","The maximum value in the red channel.","Inactive pixel.","Active pixel.","Pixel color trait.","Red color (R: 100%, G: 0%, B: 0%)","Red color (R: 100%, G: 0%, B: 0%)","Red color (R: 100%, G: 0%, B: 0%)","Raw data type.","Rgb555 color.","Rgb565 color.","Rgb888 color.","RGB color.","The underlying storage type for the pixel color","White color (100% luma)","White color (100% luma)","White color (100% luma)","White color (R: 100%, G: 100%, B: 100%)","White color (R: 100%, G: 100%, B: 100%)","White color (R: 100%, G: 100%, B: 100%)","Yellow color (R: 100%, G: 100%, B: 0%)","Yellow color (R: 100%, G: 100%, B: 0%)","Yellow color (R: 100%, G: 100%, B: 0%)","Returns the blue channel value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the green channel value.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the <code>PixelColor</code> into its raw storage form","Inverts the color.","Returns <code>true</code> if this color is <code>Off</code>.","Returns <code>true</code> if this color is <code>On</code>.","Returns the luma channel value.","","","","","","","","","","","","","Creates a new grayscale color.","Creates a new grayscale color.","Creates a new grayscale color.","Creates a new Rgb555 color. Too large channel values will …","Creates a new Bgr555 color. Too large channel values will …","Creates a new Rgb565 color. Too large channel values will …","Creates a new Bgr565 color. Too large channel values will …","Creates a new Rgb888 color. Too large channel values will …","Creates a new Bgr888 color. Too large channel values will …","","","","","","","","","","","Returns the red channel value.","","","","","","","Raw color types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bits per pixel.","Big endian byte order marker.","Raw data byte order.","Little endian byte order marker.","Trait implemented by all <code>RawUx</code> types.","1 bit per pixel raw data.","16 bits per pixel raw data.","2 bits per pixel raw data.","24 bits per pixel raw data.","32 bits per pixel raw data.","4 bits per pixel raw data.","8 bits per pixel raw data.","Storage type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>u32</code> into a <code>RawData</code> type.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this raw data into the storage type.","","","","","","","","","","","","","","","Creates a new color from the least significant 1 bit of …","Creates a new color from the least significant 2 bits of …","Creates a new color from the least significant 4 bits of …","Creates a new color from the least significant 8 bits of …","Creates a new color from the least significant 16 bits of …","Creates a new color from the least significant 24 bits of …","Creates a new color from the least significant 32 bits of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Defines a display that can be used to render <code>Drawable</code> …","Error type to return when a drawing operation fails.","Grayscale color.","2D point.","RGB color.","2D size.","Returns the blue channel value.","Clears the display with the supplied color.","Clears the display with the supplied color.","Clears the display with the supplied color.","Draws a styled circle primitive.","Draws a styled circle primitive.","Draws a styled circle primitive.","Draws an image with known size","Draws an image with known size","Draws an image with known size","Draws an object from an iterator over its pixels.","Draws an object from an iterator over its pixels.","Draws an object from an iterator over its pixels.","Draws a styled line primitive.","Draws a styled line primitive.","Draws a styled line primitive.","Draws a pixel on the display.","Draws a styled rectangle primitive.","Draws a styled rectangle primitive.","Draws a styled rectangle primitive.","Draws a styled triangle primitive.","Draws a styled triangle primitive.","Draws a styled triangle primitive.","Returns the green channel value.","The height.","Returns the luma channel value.","Returns the red channel value.","Returns the dimensions of the <code>DrawTarget</code> in pixels.","The width.","The x coordinate.","The y coordinate.","Primitive trait","The circle primitive","Converts this primitive into a <code>Styled</code>.","The line primitive","The rectangle primitive. Also good for drawing squares.","The triangle primitive.","Circle primitive","Pixel iterator for each pixel in the circle border","","","","","","Center point of circle","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new circle centered around a given point with a …","","","","Radius of the circle","","","Translate the circle center from its current position to a …","Translate the circle center from its current position to a …","","","","","","","Line primitive","Pixel iterator for each pixel in the line","","","","","","","","","","","End point","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new line","","","","","Start point","","Translate the line from its current position to a new …","Translate the line from its current position to a new …","","","","","","","Rectangle primitive","Pixel iterator for each pixel in the rect border","","","","","","Bottom right point of the rect","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new rectangle from the top left point to the …","","","","","","Top left point of the rect","Translate the rect from its current position to a new …","Translate the rect from its current position to a new …","","","","","","","Pixel iterator for each pixel in the triangle border","Triangle primitive","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new triangle from an array of points.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new triangle with a given style","","First point of the triangle","Second point of the triangle","Third point of the triangle","","","","","Translate the triangle from its current position to a new …","Translate the triangle from its current position to a new …","","","","","","","Style properties for primitives.","Primitive style builder.","Styled.","Style properties for text.","Text style builder.","Sets the background color.","Background color.","","","","","","","","","","","","","Builds the primitive style.","Builds the text style.","","","","","","","","","","","","","","","","","","","","","Sets the fill color.","Fill color of the primitive.","","","","","","Font.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Creates a primitive style without fill and stroke.","Creates a new primitive style builder.","Creates a styled.","Creates a text style with transparent background.","Creates a new text style builder with a given font.","","","","","","Primitive.","","Returns the size of the bounding box of a styled text.","Sets the stroke color.","Stroke color of the primitive.","Sets the stroke width.","Stroke width in pixels.","Style.","Sets the text color.","Text color.","","","","","","","","","","","","","","","","","","","","Creates a fill primitive style.","Creates a stroke primitive style.","Transform operations","Move the origin of an object by a given number of (x, y) …","Move the origin of an object by a given number of (x, y) …"],"i":[0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,2,0,0,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,0,0,0,0,0,0,0,0,0,4,5,6,7,8,9,10,11,12,5,6,7,8,9,10,11,12,4,5,6,7,8,9,10,4,4,5,6,7,8,9,10,11,12,5,6,7,8,9,10,11,12,5,6,7,8,9,10,12,5,6,7,8,9,10,11,12,5,6,7,8,9,10,11,12,5,6,7,8,9,10,11,12,5,6,7,8,9,10,11,12,5,6,7,8,9,10,11,12,12,11,11,12,11,12,5,6,7,8,9,10,11,12,11,11,11,11,5,6,7,8,9,10,11,12,5,6,7,8,9,10,11,12,5,6,7,8,9,10,11,12,0,0,0,13,13,13,14,13,13,14,13,14,13,14,15,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,13,13,13,14,14,14,14,13,14,14,13,14,13,14,13,14,13,14,13,14,13,13,14,13,14,15,13,13,14,13,13,14,15,13,13,13,13,14,13,14,13,14,14,13,13,13,14,0,0,0,0,0,0,0,16,17,18,19,17,18,19,19,18,19,18,18,17,18,19,17,18,19,18,20,18,17,18,19,17,18,18,19,17,18,16,19,19,19,19,17,18,19,17,18,19,17,18,19,20,18,0,0,21,21,22,21,22,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,23,23,23,24,24,24,24,24,24,0,0,0,0,24,24,24,24,24,24,0,0,0,0,0,24,24,24,24,24,24,24,24,24,24,24,24,25,25,0,24,24,24,26,0,0,0,0,27,23,23,23,24,24,24,24,24,24,24,28,29,30,31,32,33,25,34,35,36,28,29,30,31,32,33,25,34,35,36,28,29,30,31,32,33,25,36,32,25,34,35,36,28,29,30,31,32,33,25,34,35,36,28,29,30,31,32,33,25,36,32,25,34,35,36,28,29,30,31,32,33,25,34,35,36,28,29,30,31,32,33,25,34,35,36,28,29,30,31,32,33,25,25,25,34,34,34,35,35,35,36,36,36,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,24,28,29,30,31,32,33,25,34,35,36,28,29,30,31,32,33,25,34,35,36,28,29,30,31,32,33,27,25,25,25,23,34,35,36,34,35,36,28,29,30,31,32,33,34,35,36,28,29,30,31,32,33,25,34,35,36,28,29,30,31,32,33,24,28,29,30,31,32,33,0,25,34,35,36,28,29,30,31,32,33,25,34,35,36,28,29,30,31,32,33,25,34,35,36,28,29,30,31,32,33,37,0,0,0,0,0,0,0,0,0,0,0,37,38,39,40,41,42,43,44,45,46,38,39,40,41,42,43,44,45,46,38,39,40,41,42,43,44,45,46,38,39,40,41,42,43,44,45,46,38,39,40,41,42,43,44,38,39,40,41,42,43,44,45,46,38,39,40,41,42,43,44,45,46,38,38,38,39,39,39,40,40,40,41,41,41,42,42,42,42,42,42,43,43,43,43,44,44,45,46,37,38,39,40,41,42,43,44,38,39,40,41,42,43,44,45,46,38,39,40,41,42,43,44,45,46,37,38,39,40,41,42,43,44,38,39,40,41,42,43,44,38,39,40,41,42,43,44,38,39,40,41,42,43,44,45,46,38,39,40,41,42,43,44,45,46,38,39,40,41,42,43,44,45,46,38,39,40,41,42,43,44,45,46,0,1,0,0,0,0,24,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,24,14,23,24,1,14,13,13,0,0,47,0,0,0,0,0,48,49,48,49,48,48,48,49,48,49,48,48,49,48,49,48,49,48,49,48,49,49,48,49,48,49,48,49,48,48,48,48,48,48,49,48,49,48,49,0,0,50,51,50,51,50,50,51,50,51,50,50,50,51,50,51,50,51,50,51,50,51,51,50,51,50,51,50,51,50,50,50,50,50,50,51,50,51,50,51,0,0,52,53,52,53,52,52,52,53,52,53,52,52,53,52,53,52,53,52,53,52,53,53,52,53,52,53,52,53,52,52,52,52,52,52,53,52,53,52,53,0,0,54,55,54,55,54,54,55,54,55,54,54,55,54,55,54,55,54,54,55,54,55,55,54,55,54,55,54,54,54,54,55,54,54,54,54,54,55,54,55,54,55,0,0,0,0,0,56,57,58,59,60,57,56,58,59,60,57,56,60,60,59,56,58,59,60,57,56,58,59,60,57,56,58,59,60,57,56,58,59,60,57,56,59,58,58,59,60,57,56,57,58,59,60,57,56,58,59,60,57,56,58,59,60,57,56,58,59,60,57,56,58,59,60,57,56,58,59,60,57,56,60,60,60,59,58,59,58,60,56,57,60,60,60,60,58,59,60,57,56,58,59,60,57,56,58,59,60,57,56,58,58,0,61,61],"f":[null,null,[[["",0],["pixel",3]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["size",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["pixel",3]],[[["",0],["pixel",3]],["ordering",4]],[[],["pixel",3]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["pixel",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["",0]]],[[]],[[["",0],["pixel",3]],["bool",0]],[[["",0],["pixel",3]],["option",4,[["ordering",4]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["char",0]],["u32",0]],[[["char",0]],["u32",0]],[[["char",0]],["u32",0]],[[["char",0]],["u32",0]],[[["char",0]],["u32",0]],[[["char",0]],["u32",0]],[[["char",0]],["u32",0]],[[["char",0]],["u32",0]],[[["char",0],["u32",0],["u32",0]],["bool",0]],[[["",0]],["font12x16",3]],[[["",0]],["font24x32",3]],[[["",0]],["font6x12",3]],[[["",0]],["font6x6",3]],[[["",0]],["font6x8",3]],[[["",0]],["font8x16",3]],[[["",0]],["text",3]],[[["",0]],["styledtextiterator",3]],[[["",0],["font12x16",3]],["ordering",4]],[[["",0],["font24x32",3]],["ordering",4]],[[["",0],["font6x12",3]],["ordering",4]],[[["",0],["font6x6",3]],["ordering",4]],[[["",0],["font6x8",3]],["ordering",4]],[[["",0],["font8x16",3]],["ordering",4]],[[["",0],["text",3]],["ordering",4]],[[["",0],["styledtextiterator",3]],["ordering",4]],[[],["font12x16",3]],[[],["font24x32",3]],[[],["font6x12",3]],[[],["font6x6",3]],[[],["font6x8",3]],[[],["font8x16",3]],[[],["styledtextiterator",3]],[[["",0],["font12x16",3]],["bool",0]],[[["",0],["font24x32",3]],["bool",0]],[[["",0],["font6x12",3]],["bool",0]],[[["",0],["font6x6",3]],["bool",0]],[[["",0],["font6x8",3]],["bool",0]],[[["",0],["font8x16",3]],["bool",0]],[[["",0],["text",3]],["bool",0]],[[["",0],["styledtextiterator",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["textstyle",3]],["styled",3,[["textstyle",3]]]],[[["",0],["text",3]],["bool",0]],[[["",0],["styledtextiterator",3]],["bool",0]],[[["str",0],["point",3]]],[[["",0]],["option",4]],[[["",0],["font12x16",3]],["option",4,[["ordering",4]]]],[[["",0],["font24x32",3]],["option",4,[["ordering",4]]]],[[["",0],["font6x12",3]],["option",4,[["ordering",4]]]],[[["",0],["font6x6",3]],["option",4,[["ordering",4]]]],[[["",0],["font6x8",3]],["option",4,[["ordering",4]]]],[[["",0],["font8x16",3]],["option",4,[["ordering",4]]]],[[["",0],["text",3]],["option",4,[["ordering",4]]]],[[["",0],["styledtextiterator",3]],["option",4,[["ordering",4]]]],null,null,[[["",0],["point",3]]],[[["",0],["point",3]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[]],[[["point",3]],["point",3]],[[["size",3]],["point",3]],[[["size",3]],["size",3]],[[["",0],["size",3]]],[[["",0],["point",3]]],[[["",0],["size",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["point",3]],[[["",0]],["point",3]],[[["",0]],["size",3]],[[["",0],["point",3]],["ordering",4]],[[["",0],["size",3]],["ordering",4]],[[],["point",3]],[[],["size",3]],[[["i32",0]],["point",3]],[[["u32",0]],["size",3]],[[["",0],["i32",0]]],[[["",0],["u32",0]]],[[["",0],["point",3]],["bool",0]],[[["",0],["size",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["",0],["usize",0]],["i32",0]],[[["",0],["usize",0]],["u32",0]],[[]],[[]],[[["i32",0]],["point",3]],[[["u32",0]],["size",3]],[[["",0],["i32",0]]],[[["",0],["u32",0]]],[[["",0],["point",3]],["bool",0]],[[["",0],["size",3]],["bool",0]],[[]],[[["i32",0],["i32",0]]],[[["u32",0],["u32",0]]],[[["",0],["point",3]],["option",4,[["ordering",4]]]],[[["",0],["size",3]],["option",4,[["ordering",4]]]],[[["",0]],["size",3]],[[["point",3]],["point",3]],[[["size",3]],["point",3]],[[["size",3]],["size",3]],[[["",0],["size",3]]],[[["",0],["point",3]]],[[["",0],["size",3]]],[[["",0]],["point",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[]],[[]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["point",3]],[[["",0]],["imageraw",3]],[[["",0]],["image",3]],[[["",0],["imageraw",3]],["ordering",4]],[[["",0],["imageraw",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0],["",0]]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[]],[[]],[[]],[[]],[[["",0],["imageraw",3]],["bool",0]],[[["u32",0],["u32",0]]],[[["",0],["point",3]]],[[["",0]],["option",4]],[[["",0],["imageraw",3]],["option",4,[["ordering",4]]]],[[]],[[["",0]],["size",3]],[[["",0]],["point",3]],[[["",0],["point",3]]],[[["",0],["point",3]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["char",0]]],[[["",0]],["mockdisplay",3]],[[],["char",0]],[[]],[[["",0],["pixel",3]],["result",4]],[[["",0],["mockdisplay",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["mockdisplay",3]],[[["",0],["point",3]],["option",4]],[[["",0]],["usize",0]],[[]],[[]],[[["",0],["point",3],["option",4]]],[[["",0]],["size",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["usize",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["char",0]]],[[["char",0]]],[[["char",0]]],[[["",0]],["binarycolor",4]],[[["",0]],["gray2",3]],[[["",0]],["gray4",3]],[[["",0]],["gray8",3]],[[["",0]],["rgb555",3]],[[["",0]],["bgr555",3]],[[["",0]],["rgb565",3]],[[["",0]],["bgr565",3]],[[["",0]],["rgb888",3]],[[["",0]],["bgr888",3]],[[["",0],["binarycolor",4]],["ordering",4]],[[["",0],["gray2",3]],["ordering",4]],[[["",0],["gray4",3]],["ordering",4]],[[["",0],["gray8",3]],["ordering",4]],[[["",0],["rgb555",3]],["ordering",4]],[[["",0],["bgr555",3]],["ordering",4]],[[["",0],["rgb565",3]],["ordering",4]],[[["",0],["bgr565",3]],["ordering",4]],[[["",0],["rgb888",3]],["ordering",4]],[[["",0],["bgr888",3]],["ordering",4]],[[["binarycolor",4]],["char",0]],[[["gray8",3]],["char",0]],[[["rgb888",3]],["char",0]],[[]],[[],["gray2",3]],[[],["gray4",3]],[[],["gray8",3]],[[],["rgb555",3]],[[],["bgr555",3]],[[],["rgb565",3]],[[],["bgr565",3]],[[],["rgb888",3]],[[],["bgr888",3]],[[["",0],["binarycolor",4]],["bool",0]],[[["",0],["gray2",3]],["bool",0]],[[["",0],["gray4",3]],["bool",0]],[[["",0],["gray8",3]],["bool",0]],[[["",0],["rgb555",3]],["bool",0]],[[["",0],["bgr555",3]],["bool",0]],[[["",0],["rgb565",3]],["bool",0]],[[["",0],["bgr565",3]],["bool",0]],[[["",0],["rgb888",3]],["bool",0]],[[["",0],["bgr888",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["rawu1",3]]],[[]],[[["bool",0]]],[[["rawu2",3]]],[[["binarycolor",4]]],[[]],[[]],[[["binarycolor",4]]],[[["rawu4",3]]],[[]],[[["binarycolor",4]]],[[["rawu8",3]]],[[["binarycolor",4]]],[[["gray2",3]]],[[["rawu16",3]]],[[]],[[["bgr555",3]]],[[["gray8",3]]],[[["rgb565",3]]],[[["bgr565",3]]],[[["rgb888",3]]],[[["gray4",3]]],[[["bgr888",3]]],[[["binarycolor",4]]],[[["gray4",3]]],[[["rawu16",3]]],[[["bgr888",3]]],[[["rgb888",3]]],[[["bgr565",3]]],[[["rgb565",3]]],[[["rgb555",3]]],[[]],[[["gray2",3]]],[[["gray8",3]]],[[["gray2",3]]],[[]],[[["gray8",3]]],[[["rawu16",3]]],[[["bgr565",3]]],[[["bgr555",3]]],[[["rgb555",3]]],[[["binarycolor",4]]],[[["rgb888",3]]],[[["gray4",3]]],[[["bgr888",3]]],[[["gray8",3]]],[[["gray4",3]]],[[["rawu16",3]]],[[["binarycolor",4]]],[[["rgb555",3]]],[[]],[[["bgr555",3]]],[[["gray2",3]]],[[["rgb565",3]]],[[["rgb888",3]]],[[["bgr888",3]]],[[["bgr888",3]]],[[["bgr555",3]]],[[["rawu24",3]]],[[["gray8",3]]],[[]],[[["gray4",3]]],[[["binarycolor",4]]],[[["bgr565",3]]],[[["rgb565",3]]],[[["gray2",3]]],[[["rgb555",3]]],[[["rgb555",3]]],[[["gray2",3]]],[[["binarycolor",4]]],[[["gray8",3]]],[[["gray4",3]]],[[["bgr555",3]]],[[["rgb565",3]]],[[["bgr565",3]]],[[["rgb888",3]]],[[]],[[["rawu24",3]]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",0]],[[],["bool",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0],["gray2",3]],["bool",0]],[[["",0],["gray4",3]],["bool",0]],[[["",0],["gray8",3]],["bool",0]],[[["",0],["rgb555",3]],["bool",0]],[[["",0],["bgr555",3]],["bool",0]],[[["",0],["rgb565",3]],["bool",0]],[[["",0],["bgr565",3]],["bool",0]],[[["",0],["rgb888",3]],["bool",0]],[[["",0],["bgr888",3]],["bool",0]],[[["u8",0]]],[[["u8",0]]],[[["u8",0]]],[[["u8",0],["u8",0],["u8",0]]],[[["u8",0],["u8",0],["u8",0]]],[[["u8",0],["u8",0],["u8",0]]],[[["u8",0],["u8",0],["u8",0]]],[[["u8",0],["u8",0],["u8",0]]],[[["u8",0],["u8",0],["u8",0]]],[[["",0],["binarycolor",4]],["option",4,[["ordering",4]]]],[[["",0],["gray2",3]],["option",4,[["ordering",4]]]],[[["",0],["gray4",3]],["option",4,[["ordering",4]]]],[[["",0],["gray8",3]],["option",4,[["ordering",4]]]],[[["",0],["rgb555",3]],["option",4,[["ordering",4]]]],[[["",0],["bgr555",3]],["option",4,[["ordering",4]]]],[[["",0],["rgb565",3]],["option",4,[["ordering",4]]]],[[["",0],["bgr565",3]],["option",4,[["ordering",4]]]],[[["",0],["rgb888",3]],["option",4,[["ordering",4]]]],[[["",0],["bgr888",3]],["option",4,[["ordering",4]]]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["rawu1",3]],[[["",0]],["rawu2",3]],[[["",0]],["rawu4",3]],[[["",0]],["rawu8",3]],[[["",0]],["rawu16",3]],[[["",0]],["rawu24",3]],[[["",0]],["rawu32",3]],[[["",0]],["littleendian",4]],[[["",0]],["bigendian",4]],[[["",0],["rawu1",3]],["ordering",4]],[[["",0],["rawu2",3]],["ordering",4]],[[["",0],["rawu4",3]],["ordering",4]],[[["",0],["rawu8",3]],["ordering",4]],[[["",0],["rawu16",3]],["ordering",4]],[[["",0],["rawu24",3]],["ordering",4]],[[["",0],["rawu32",3]],["ordering",4]],[[["",0],["littleendian",4]],["ordering",4]],[[["",0],["bigendian",4]],["ordering",4]],[[],["rawu1",3]],[[],["rawu2",3]],[[],["rawu4",3]],[[],["rawu8",3]],[[],["rawu16",3]],[[],["rawu24",3]],[[],["rawu32",3]],[[["",0],["rawu1",3]],["bool",0]],[[["",0],["rawu2",3]],["bool",0]],[[["",0],["rawu4",3]],["bool",0]],[[["",0],["rawu8",3]],["bool",0]],[[["",0],["rawu16",3]],["bool",0]],[[["",0],["rawu24",3]],["bool",0]],[[["",0],["rawu32",3]],["bool",0]],[[["",0],["littleendian",4]],["bool",0]],[[["",0],["bigendian",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["binarycolor",4]]],[[["u8",0]]],[[]],[[["u8",0]]],[[["gray2",3]]],[[]],[[["gray4",3]]],[[["u8",0]]],[[]],[[["gray8",3]]],[[]],[[["u8",0]]],[[["u16",0]]],[[["bgr565",3]]],[[["rgb565",3]]],[[]],[[["bgr555",3]]],[[["rgb555",3]]],[[["rgb888",3]]],[[["bgr888",3]]],[[["u32",0]]],[[]],[[]],[[["u32",0]]],[[]],[[]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["rawu1",3]],["bool",0]],[[["",0],["rawu2",3]],["bool",0]],[[["",0],["rawu4",3]],["bool",0]],[[["",0],["rawu8",3]],["bool",0]],[[["",0],["rawu16",3]],["bool",0]],[[["",0],["rawu24",3]],["bool",0]],[[["",0],["rawu32",3]],["bool",0]],[[["u8",0]]],[[["u8",0]]],[[["u8",0]]],[[["u8",0]]],[[["u16",0]]],[[["u32",0]]],[[["u32",0]]],[[["",0],["rawu1",3]],["option",4,[["ordering",4]]]],[[["",0],["rawu2",3]],["option",4,[["ordering",4]]]],[[["",0],["rawu4",3]],["option",4,[["ordering",4]]]],[[["",0],["rawu8",3]],["option",4,[["ordering",4]]]],[[["",0],["rawu16",3]],["option",4,[["ordering",4]]]],[[["",0],["rawu24",3]],["option",4,[["ordering",4]]]],[[["",0],["rawu32",3]],["option",4,[["ordering",4]]]],[[["",0],["littleendian",4]],["option",4,[["ordering",4]]]],[[["",0],["bigendian",4]],["option",4,[["ordering",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["u8",0]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["styled",3]],["result",4]],[[["",0],["styled",3]],["result",4]],[[["",0],["styled",3]],["result",4]],[[["",0],["image",3]],["result",4]],[[["",0],["image",3]],["result",4]],[[["",0],["image",3]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["styled",3]],["result",4]],[[["",0],["styled",3]],["result",4]],[[["",0],["styled",3]],["result",4]],[[["",0],["pixel",3]],["result",4]],[[["",0],["styled",3]],["result",4]],[[["",0],["styled",3]],["result",4]],[[["",0],["styled",3]],["result",4]],[[["",0],["styled",3]],["result",4]],[[["",0],["styled",3]],["result",4]],[[["",0],["styled",3]],["result",4]],[[["",0]],["u8",0]],null,[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["size",3]],null,null,null,null,null,[[["primitivestyle",3]],["styled",3,[["primitivestyle",3]]]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["point",3]],null,[[["",0]],["circle",3]],[[["",0]],["styledcircleiterator",3]],[[["",0],["circle",3]],["ordering",4]],[[["",0],["styledcircleiterator",3]],["ordering",4]],[[],["circle",3]],[[["",0],["circle",3]],["bool",0]],[[["",0],["styledcircleiterator",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[["",0],["circle",3]],["bool",0]],[[["",0],["styledcircleiterator",3]],["bool",0]],[[["point",3],["u32",0]]],[[["",0]],["option",4]],[[["",0],["circle",3]],["option",4,[["ordering",4]]]],[[["",0],["styledcircleiterator",3]],["option",4,[["ordering",4]]]],null,[[["",0]],["size",3]],[[["",0]],["point",3]],[[["",0],["point",3]]],[[["",0],["point",3]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["point",3]],[[["",0]],["line",3]],[[["",0]],["styledlineiterator",3]],[[["",0],["line",3]],["ordering",4]],[[["",0],["styledlineiterator",3]],["ordering",4]],[[],["line",3]],null,[[["",0],["line",3]],["bool",0]],[[["",0],["styledlineiterator",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[["",0],["line",3]],["bool",0]],[[["",0],["styledlineiterator",3]],["bool",0]],[[["point",3],["point",3]]],[[["",0]],["option",4]],[[["",0],["line",3]],["option",4,[["ordering",4]]]],[[["",0],["styledlineiterator",3]],["option",4,[["ordering",4]]]],[[["",0]],["size",3]],null,[[["",0]],["point",3]],[[["",0],["point",3]]],[[["",0],["point",3]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["point",3]],null,[[["",0]],["rectangle",3]],[[["",0]],["styledrectangleiterator",3]],[[["",0],["rectangle",3]],["ordering",4]],[[["",0],["styledrectangleiterator",3]],["ordering",4]],[[],["rectangle",3]],[[["",0],["rectangle",3]],["bool",0]],[[["",0],["styledrectangleiterator",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[["",0],["rectangle",3]],["bool",0]],[[["",0],["styledrectangleiterator",3]],["bool",0]],[[["point",3],["point",3]]],[[["",0]],["option",4]],[[["",0],["rectangle",3]],["option",4,[["ordering",4]]]],[[["",0],["styledrectangleiterator",3]],["option",4,[["ordering",4]]]],[[["",0]],["size",3]],[[["",0]],["point",3]],null,[[["",0],["point",3]]],[[["",0],["point",3]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["point",3]],[[["",0]],["triangle",3]],[[["",0]],["styledtriangleiterator",3]],[[["",0],["triangle",3]],["ordering",4]],[[["",0],["styledtriangleiterator",3]],["ordering",4]],[[],["triangle",3]],[[["",0],["triangle",3]],["bool",0]],[[["",0],["styledtriangleiterator",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[["",0],["triangle",3]],["bool",0]],[[["",0],["styledtriangleiterator",3]],["bool",0]],[[["point",3],["point",3],["point",3]]],[[["",0]],["option",4]],null,null,null,[[["",0],["triangle",3]],["option",4,[["ordering",4]]]],[[["",0],["styledtriangleiterator",3]],["option",4,[["ordering",4]]]],[[["",0]],["size",3]],[[["",0]],["point",3]],[[["",0],["point",3]]],[[["",0],["point",3]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["point",3]],[[["",0]],["point",3]],[[],["primitivestyle",3]],[[],["textstyle",3]],[[["",0]],["primitivestyle",3]],[[["",0]],["primitivestylebuilder",3]],[[["",0]],["styled",3]],[[["",0]],["textstyle",3]],[[["",0]],["textstylebuilder",3]],[[["",0],["primitivestyle",3]],["ordering",4]],[[["",0],["primitivestylebuilder",3]],["ordering",4]],[[["",0],["styled",3]],["ordering",4]],[[["",0],["textstyle",3]],["ordering",4]],[[["",0],["textstylebuilder",3]],["ordering",4]],[[]],[[],["primitivestylebuilder",3]],[[],["styled",3]],[[],["textstyle",3]],[[],["textstylebuilder",3]],[[["",0],["primitivestyle",3]],["bool",0]],[[["",0],["primitivestylebuilder",3]],["bool",0]],[[["",0],["styled",3]],["bool",0]],[[["",0],["textstyle",3]],["bool",0]],[[["",0],["textstylebuilder",3]],["bool",0]],[[]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[["",0],["primitivestyle",3]],["bool",0]],[[["",0],["primitivestylebuilder",3]],["bool",0]],[[["",0],["styled",3]],["bool",0]],[[["",0],["textstyle",3]],["bool",0]],[[["",0],["textstylebuilder",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[["",0],["primitivestyle",3]],["option",4,[["ordering",4]]]],[[["",0],["primitivestylebuilder",3]],["option",4,[["ordering",4]]]],[[["",0],["styled",3]],["option",4,[["ordering",4]]]],[[["",0],["textstyle",3]],["option",4,[["ordering",4]]]],[[["",0],["textstylebuilder",3]],["option",4,[["ordering",4]]]],null,[[["",0]],["size",3]],[[["",0]],["size",3]],[[]],null,[[["u32",0]]],null,null,[[]],null,[[["",0]],["point",3]],[[["",0]],["point",3]],[[["",0],["point",3]]],[[["",0],["point",3]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[["u32",0]]],null,[[["",0],["point",3]]],[[["",0],["point",3]],["",0]]],"p":[[8,"DrawTarget"],[3,"Pixel"],[8,"Drawable"],[8,"Font"],[3,"Font12x16"],[3,"Font24x32"],[3,"Font6x12"],[3,"Font6x6"],[3,"Font6x8"],[3,"Font8x16"],[3,"Text"],[3,"StyledTextIterator"],[3,"Point"],[3,"Size"],[8,"Dimensions"],[8,"IntoPixelIter"],[3,"ImageIterator"],[3,"ImageRaw"],[3,"Image"],[8,"ImageDimensions"],[3,"MockDisplay"],[8,"ColorMapping"],[8,"GrayColor"],[8,"RgbColor"],[4,"BinaryColor"],[8,"PixelColor"],[8,"IntoStorage"],[3,"Rgb555"],[3,"Bgr555"],[3,"Rgb565"],[3,"Bgr565"],[3,"Rgb888"],[3,"Bgr888"],[3,"Gray2"],[3,"Gray4"],[3,"Gray8"],[8,"RawData"],[3,"RawU1"],[3,"RawU2"],[3,"RawU4"],[3,"RawU8"],[3,"RawU16"],[3,"RawU24"],[3,"RawU32"],[4,"LittleEndian"],[4,"BigEndian"],[8,"Primitive"],[3,"Circle"],[3,"StyledCircleIterator"],[3,"Line"],[3,"StyledLineIterator"],[3,"Rectangle"],[3,"StyledRectangleIterator"],[3,"Triangle"],[3,"StyledTriangleIterator"],[3,"TextStyleBuilder"],[3,"TextStyle"],[3,"PrimitiveStyle"],[3,"PrimitiveStyleBuilder"],[3,"Styled"],[8,"Transform"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};